"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createProgram = void 0;
const commander_1 = __importDefault(require("commander"));
const package_json_1 = __importDefault(require("./package.json"));
function parseTemplate(value) {
    if (value !== "javascript" && value !== "typescript") {
        throw new commander_1.default.InvalidOptionArgumentError('only "javascript" or "typescript" is supported via template, pass nothing to use typescript template');
    }
    return value;
}
const createProgram = ({ commands: { clone, init } }) => {
    const program = new commander_1.default.Command(package_json_1.default.name).version(package_json_1.default.version, "-v, --version", "output the current version");
    program.command("init").action(() => {
        init === null || init === void 0 ? void 0 : init();
    });
    program
        .command("clone <sources...>")
        .description("clone components/styles to your config directory")
        .option("-d, --dir [directory]", "destination directory")
        .option("-t, --template [template]", "template of the files, typescript (default) | javascript", parseTemplate)
        .option("--no-storybook", "storybook files will not be included.")
        .option("--no-test", "test files will not be included.")
        .action((sources, options, command) => {
        clone === null || clone === void 0 ? void 0 : clone(sources, options, command);
    });
    return program;
};
exports.createProgram = createProgram;
