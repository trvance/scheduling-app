#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const got_1 = __importDefault(require("got"));
const fs_1 = __importDefault(require("fs"));
const cpy_1 = __importDefault(require("cpy"));
const chalk_1 = __importDefault(require("chalk"));
const rimraf_1 = __importDefault(require("rimraf"));
const tar = __importStar(require("tar"));
const stream_1 = require("stream");
const util_1 = require("util");
const update_check_1 = __importDefault(require("update-check"));
const child_process_1 = require("child_process");
const program_1 = require("./program");
const package_json_1 = __importDefault(require("./package.json"));
const pipeline = util_1.promisify(stream_1.Stream.pipeline);
const TEMPLATE_FOLDER_MAP = {
    typescript: "src",
    javascript: "javascript",
};
const MUI_TREASURY_CONFIG_FILE = "mui-treasury.config.js";
const DEFAULT_CONFIG = {
    dir: "src/mui-treasury",
    template: "typescript",
    storybook: true,
    test: true,
};
const CONFIG_FILE_TEMPLATE = `module.exports = {
  dir: "${DEFAULT_CONFIG.dir}",
  template: "${DEFAULT_CONFIG.template}",
  storybook: ${DEFAULT_CONFIG.storybook},
  test: ${DEFAULT_CONFIG.test},
};
`;
const cloneParams = {
    sources: [],
    options: undefined,
};
const logger = {
    log: (...text) => {
        console.log(chalk_1.default.bgHex("D4D4D8").hex("3F3F46")("mui-treasury"), ...text);
    },
    info: function (text) {
        this.log(chalk_1.default.bold(chalk_1.default.green("info")), typeof text === "function" ? text(chalk_1.default) : text);
    },
    config: function (text) {
        this.log(chalk_1.default.bold(chalk_1.default.hex("0284C7")("config")), typeof text === "function" ? text(chalk_1.default) : text);
    },
    success: function (text) {
        this.log(chalk_1.default.bold(chalk_1.default.green("success")), typeof text === "function" ? text(chalk_1.default) : text);
    },
    version: function () {
        this.log(chalk_1.default.bold(chalk_1.default.hex("F59E0B")("version")), chalk_1.default.bold(chalk_1.default.yellow(`v${package_json_1.default.version}`)));
    },
};
function getConfigFile(overrides) {
    try {
        const config = require(`${process.cwd()}/${MUI_TREASURY_CONFIG_FILE}`);
        logger.version();
        logger.info("using config from mui-treasury.config.js");
        return Object.assign(Object.assign({}, config), overrides);
    }
    catch (error) {
        logger.info("config file not found, use default config");
        logger.info(chalk_1.default.blue('{ dir: "src/mui-treasury", storybook: true, test: true }'));
    }
    return Object.assign(Object.assign({}, DEFAULT_CONFIG), overrides);
}
function downloadAndExtractCode(root, sources) {
    return pipeline(got_1.default.stream("https://codeload.github.com/siriwatknp/mui-treasury-next/tar.gz/main"), tar.extract({ cwd: root, strip: 2 }, sources.map((src) => `mui-treasury-next-main/packages/${src}`)));
}
const update = update_check_1.default(package_json_1.default).catch(() => null);
function shouldUseYarn() {
    try {
        const userAgent = process.env.npm_config_user_agent;
        if (userAgent) {
            return Boolean(userAgent && userAgent.startsWith("yarn"));
        }
        child_process_1.execSync("yarnpkg --version", { stdio: "ignore" });
        return true;
    }
    catch (e) {
        return false;
    }
}
function notifyUpdate() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const res = yield update;
            if (res === null || res === void 0 ? void 0 : res.latest) {
                const isYarn = shouldUseYarn();
                console.log();
                console.log(chalk_1.default.yellow.bold("A new version of `create-next-app` is available!"));
                console.log("You can update by running: " +
                    chalk_1.default.cyan(isYarn
                        ? "yarn global add create-next-app"
                        : "npm i -g create-next-app"));
                console.log();
            }
            process.exit();
        }
        catch (_a) {
            // ignore error
        }
    });
}
const program = program_1.createProgram({
    commands: {
        clone: (sources, options) => {
            cloneParams.sources = sources;
            cloneParams.options = options;
        },
        init: () => {
            fs_1.default.writeFile(MUI_TREASURY_CONFIG_FILE, CONFIG_FILE_TEMPLATE, function (err) {
                if (err)
                    throw err;
                logger.success(`${MUI_TREASURY_CONFIG_FILE} is created! ðŸŽ‰`);
            });
        },
    },
});
program.parse(process.argv);
function runCloneCommand() {
    return __awaiter(this, void 0, void 0, function* () {
        const config = getConfigFile(cloneParams.options);
        if (config.dir && !config.dir.startsWith("/")) {
            config.dir = `/${config.dir}`;
        }
        for (let field of Object.entries(config)) {
            logger.config(`"${field[0]}: ${field[1]}"`);
        }
        const TEMP = "/mui-treasury-tmp";
        const tempRoot = process.cwd() + TEMP;
        const actualRoot = process.cwd() + config.dir;
        if (!fs_1.default.existsSync(tempRoot)) {
            fs_1.default.mkdirSync(tempRoot, { recursive: true });
        }
        logger.info(`start cloning ${chalk_1.default.bold(cloneParams.sources.length)} packages...`);
        yield downloadAndExtractCode(tempRoot, cloneParams.sources);
        const excludedFiles = [
            ...(!config.storybook ? [`!${tempRoot}/**/*.stories.*`] : []),
            ...(!config.test ? [`!${tempRoot}/**/*.test.*`] : []),
        ];
        logger.info("finishing things up...");
        yield Promise.all(cloneParams.sources.map((module) => cpy_1.default([
            // default template is typescript (ts codes live in "src" folder)
            `${tempRoot}/${module}/${TEMPLATE_FOLDER_MAP[config.template]}/*`,
            ...excludedFiles,
        ], `${actualRoot}/${module}`, {
            overwrite: true,
        })));
        // clean up temp folder
        yield new Promise((resolve) => {
            rimraf_1.default(tempRoot, (error) => {
                if (error)
                    throw error;
                else
                    resolve(undefined);
            });
        });
        logger.log(chalk_1.default.bold(chalk_1.default.green("âœ… cloned successfully!")));
    });
}
if (cloneParams.sources.length) {
    runCloneCommand()
        .then(notifyUpdate)
        .catch((error) => {
        throw error;
    });
}
