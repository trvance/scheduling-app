{"ast":null,"code":"var _jsxFileName = \"/Users/tyler/Documents/Programming/ReactApps/scheduler-app-database/client/src/components/employeesPage/employeeForm/EmployeeForm.js\",\n    _s = $RefreshSig$();\n\nimport { Card, Typography, TextField, Button, MenuItem, Divider, Grid } from \"@material-ui/core\";\nimport { useState } from 'react';\nimport useStyles from './styles';\nimport { useDispatch } from 'react-redux';\nimport { addEmployee } from '../../../actions/employees';\nimport { formatPhoneNumber } from '../../../formatAndValidations/formatPhoneNumber';\nimport { isEmailValid } from '../../../formatAndValidations/validateEmail';\nimport { HOTLINE, COLDLINE, MAINTENANCE, FLOATER, BACKUPCASH, CASHIER, MEATPREP } from '../../../constants/positions';\nimport AvailabilityComponent from './availabilityComponent/AvailabilityComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst positions = [MAINTENANCE, HOTLINE, COLDLINE, FLOATER, BACKUPCASH, CASHIER, MEATPREP];\nconst hours = ['0-5', '5-10', '10-15', '15-20', '20-25', '25-30', '30-35', '35-40', '40-45', '45+'];\n\nconst EmployeeForm = () => {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [firstNameError, setFirstNameError] = useState(null);\n  const [firstNameHelperText, setFirstNameHelperText] = useState('');\n  const [lastNameError, setLastNameError] = useState(null);\n  const [lastNameHelperText, setLastNameHelperText] = useState('');\n  const [emailError, setEmailError] = useState(null);\n  const [emailHelperText, setEmailHelperText] = useState('');\n  const [phoneNumberError, setPhoneNumberError] = useState(null);\n  const [phoneNumberHelperText, setPhoneNumberHelperText] = useState('');\n  const [desiredHours, setDesiredHours] = useState(null);\n  const [employee, setEmployee] = useState({\n    firstName: '',\n    middleInitial: '',\n    lastName: '',\n    phoneNumber: '',\n    email: '',\n    positions: [MAINTENANCE],\n    desiredHours: '25-30',\n    availability: [{\n      id: 1,\n      startDate: '2021-03-15T07:30',\n      endDate: '2021-03-15T22:30',\n      rRule: 'FREQ=WEEKLY;WKST=SU'\n    }, {\n      id: 2,\n      startDate: '2021-03-16T07:30',\n      endDate: '2021-03-16T22:30',\n      rRule: 'FREQ=WEEKLY;WKST=SU'\n    }, {\n      id: 3,\n      startDate: '2021-03-17T07:30',\n      endDate: '2021-03-17T22:30',\n      rRule: 'FREQ=WEEKLY;WKST=SU'\n    }, {\n      id: 4,\n      startDate: '2021-03-18T07:30',\n      endDate: '2021-03-18T22:30',\n      rRule: 'FREQ=WEEKLY;WKST=SU'\n    }, {\n      id: 5,\n      startDate: '2021-03-19T07:30',\n      endDate: '2021-03-19T22:30',\n      rRule: 'FREQ=WEEKLY;WKST=SU'\n    }, {\n      id: 6,\n      startDate: '2021-03-20T07:30',\n      endDate: '2021-03-20T22:30',\n      rRule: 'FREQ=WEEKLY;WKST=SU'\n    }, {\n      id: 0,\n      startDate: '2021-03-21T07:30',\n      endDate: '2021-03-21T22:30',\n      rRule: 'FREQ=WEEKLY;WKST=SU'\n    }]\n  });\n\n  const handleFocus = e => {\n    const fieldName = e.target.name;\n\n    switch (fieldName) {\n      case 'firstName':\n        {\n          setFirstNameError(null);\n          setFirstNameHelperText('');\n          break;\n        }\n\n      case 'lastName':\n        {\n          setLastNameError(null);\n          setLastNameHelperText('');\n          break;\n        }\n\n      case 'email':\n        {\n          setEmailError(null);\n          setEmailHelperText('');\n          break;\n        }\n\n      case 'phoneNumber':\n        {\n          setPhoneNumberError(null);\n          setPhoneNumberHelperText('');\n          break;\n        }\n    }\n  };\n\n  const handleFirstName = () => {\n    if (employee.firstName == '') {\n      setFirstNameError(true);\n      setFirstNameHelperText('Gotta have a first name!');\n    } else {\n      setFirstNameError(false);\n      setFirstNameHelperText('');\n    }\n  };\n\n  const handleLastName = () => {\n    if (employee.lastName == '') {\n      setLastNameError(true);\n      setLastNameHelperText('Gotta have a last name!');\n    } else {\n      setLastNameError(false);\n      setLastNameHelperText('');\n    }\n  };\n\n  const handlePhoneNumber = () => {\n    if (employee.phoneNumber.length < 14) {\n      setPhoneNumberError(true);\n      setPhoneNumberHelperText('Phone number is too short!');\n    } else {\n      setPhoneNumberError(false);\n      setPhoneNumberHelperText('');\n    }\n  };\n\n  const handleEmail = () => {\n    if (!isEmailValid(employee.email)) {\n      setEmailError(true);\n      setEmailHelperText(\"That isn't a valid email!\");\n    } else {\n      setEmailError(false);\n      setEmailHelperText('');\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    handleFirstName();\n    handleLastName();\n    handlePhoneNumber();\n    handleEmail();\n\n    if (firstNameError == false && lastNameError == false && phoneNumberError == false && emailError == false) {\n      dispatch(addEmployee(employee));\n      clear();\n    }\n  };\n\n  const clear = () => {\n    setEmployee({\n      firstName: '',\n      middleInitial: '',\n      lastName: '',\n      phoneNumber: '',\n      email: '',\n      positions: MAINTENANCE\n    });\n    setFirstNameError(null);\n    setFirstNameHelperText('');\n    setLastNameError(null);\n    setLastNameHelperText('');\n    setEmailError(null);\n    setEmailHelperText('');\n    setPhoneNumberError(null);\n    setPhoneNumberHelperText('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.card,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"column\",\n      justify: \"center\",\n      xs: 12,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        className: classes.title,\n        variant: \"h5\",\n        children: \"Add New Employee\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"row\",\n        justify: \"center\",\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: `${classes.root} ${classes.form}`,\n          autoComplete: \"off\",\n          noValidate: true,\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"column\",\n            justifty: \"center\",\n            item: true,\n            md: 6,\n            xs: 12,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              name: \"firstName\",\n              required: true,\n              error: firstNameError,\n              variant: \"outlined\",\n              label: \"First Name\",\n              value: employee.firstName,\n              helperText: firstNameHelperText,\n              onChange: e => setEmployee({ ...employee,\n                firstName: e.target.value.trim()\n              }),\n              onFocus: e => handleFocus(e)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              name: \"middleInitial\",\n              variant: \"outlined\",\n              label: \"Middle Initial\",\n              value: employee.middleInitial,\n              onChange: e => setEmployee({ ...employee,\n                middleInitial: e.target.value.toUpperCase()\n              }),\n              inputProps: {\n                maxLength: 1\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              name: \"lastName\",\n              required: true,\n              error: lastNameError,\n              variant: \"outlined\",\n              label: \"Last Name\",\n              value: employee.lastName,\n              helperText: lastNameHelperText,\n              onChange: e => setEmployee({ ...employee,\n                lastName: e.target.value.trim()\n              }),\n              onFocus: e => handleFocus(e)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              name: \"phoneNumber\",\n              required: true,\n              error: phoneNumberError,\n              variant: \"outlined\",\n              label: \"Phone Number\",\n              value: employee.phoneNumber,\n              helperText: phoneNumberHelperText,\n              onChange: e => setEmployee({ ...employee,\n                phoneNumber: formatPhoneNumber(e.target.value)\n              }),\n              onFocus: e => handleFocus(e)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              name: \"email\",\n              required: true,\n              error: emailError,\n              variant: \"outlined\",\n              label: \"Email\",\n              value: employee.email,\n              helperText: emailHelperText,\n              onChange: e => setEmployee({ ...employee,\n                email: e.target.value\n              }),\n              onFocus: e => handleFocus(e)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              select: true,\n              name: \"position\",\n              required: true,\n              variant: \"outlined\",\n              label: \"Position\",\n              value: employee.positions,\n              onChange: e => setEmployee({ ...employee,\n                positions: e.target.value\n              }),\n              children: positions.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: option,\n                children: option\n              }, option, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 29\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"column\",\n            justifty: \"center\",\n            item: true,\n            md: 6,\n            xs: 12,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              select: true,\n              name: \"hours\",\n              required: true,\n              variant: \"outlined\",\n              label: \"Desired Hours\",\n              value: employee.desiredHours,\n              children: hours.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: option,\n                children: option\n              }, option, false, {\n                fileName: _jsxFileName,\n                lineNumber: 213,\n                columnNumber: 29\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: \"Availability\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(AvailabilityComponent, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            className: classes.submitButton,\n            variant: \"contained\",\n            color: \"primary\",\n            size: \"large\",\n            type: \"submit\",\n            fullWidth: true,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            className: classes.clearButton,\n            variant: \"contained\",\n            color: \"secondary\",\n            size: \"small\",\n            onClick: clear,\n            fullWidth: true,\n            children: \"Clear\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EmployeeForm, \"r5JthOkHnN4H/BBsnOMR25InQqw=\", false, function () {\n  return [useStyles, useDispatch];\n});\n\n_c = EmployeeForm;\nexport default EmployeeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmployeeForm\");","map":{"version":3,"sources":["/Users/tyler/Documents/Programming/ReactApps/scheduler-app-database/client/src/components/employeesPage/employeeForm/EmployeeForm.js"],"names":["Card","Typography","TextField","Button","MenuItem","Divider","Grid","useState","useStyles","useDispatch","addEmployee","formatPhoneNumber","isEmailValid","HOTLINE","COLDLINE","MAINTENANCE","FLOATER","BACKUPCASH","CASHIER","MEATPREP","AvailabilityComponent","positions","hours","EmployeeForm","classes","dispatch","firstNameError","setFirstNameError","firstNameHelperText","setFirstNameHelperText","lastNameError","setLastNameError","lastNameHelperText","setLastNameHelperText","emailError","setEmailError","emailHelperText","setEmailHelperText","phoneNumberError","setPhoneNumberError","phoneNumberHelperText","setPhoneNumberHelperText","desiredHours","setDesiredHours","employee","setEmployee","firstName","middleInitial","lastName","phoneNumber","email","availability","id","startDate","endDate","rRule","handleFocus","e","fieldName","target","name","handleFirstName","handleLastName","handlePhoneNumber","length","handleEmail","handleSubmit","preventDefault","clear","card","title","root","form","value","trim","toUpperCase","maxLength","map","option","submitButton","clearButton"],"mappings":"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","sourcesContent":["import { Card, Typography, TextField, Button, MenuItem, Divider, Grid } from \"@material-ui/core\"\nimport { useState } from 'react'\nimport useStyles from './styles'\nimport { useDispatch } from 'react-redux'\nimport { addEmployee } from '../../../actions/employees'\nimport {formatPhoneNumber} from '../../../formatAndValidations/formatPhoneNumber'\nimport {isEmailValid} from '../../../formatAndValidations/validateEmail'\nimport { HOTLINE, COLDLINE, MAINTENANCE, FLOATER, BACKUPCASH, CASHIER, MEATPREP } from '../../../constants/positions'\nimport AvailabilityComponent from './availabilityComponent/AvailabilityComponent'\n\n\nconst positions = [ MAINTENANCE, HOTLINE, COLDLINE, FLOATER, BACKUPCASH, CASHIER, MEATPREP]\nconst hours = [ '0-5', '5-10', '10-15', '15-20', '20-25', '25-30', '30-35', '35-40', '40-45', '45+']\n\nconst EmployeeForm = () => {\n    const classes = useStyles()\n    const dispatch = useDispatch()\n\n    const [firstNameError, setFirstNameError] = useState(null)\n    const [firstNameHelperText, setFirstNameHelperText] = useState('')\n    const [lastNameError, setLastNameError] = useState(null)\n    const [lastNameHelperText, setLastNameHelperText] = useState('')\n    const [emailError, setEmailError] = useState(null)\n    const [emailHelperText, setEmailHelperText] = useState('')\n    const [phoneNumberError, setPhoneNumberError] = useState(null)\n    const [phoneNumberHelperText, setPhoneNumberHelperText] = useState('')\n    const [desiredHours, setDesiredHours] = useState(null)\n\n    const [employee, setEmployee] = useState({\n        firstName: '',\n        middleInitial: '',\n        lastName: '',\n        phoneNumber: '',\n        email: '',\n        positions: [MAINTENANCE],\n        desiredHours: '25-30',\n        availability: [\n            { \n                id: 1,\n                startDate: '2021-03-15T07:30',\n                endDate: '2021-03-15T22:30',\n                rRule: 'FREQ=WEEKLY;WKST=SU'\n            },\n            { \n                id: 2,\n                startDate: '2021-03-16T07:30',\n                endDate: '2021-03-16T22:30',\n                rRule: 'FREQ=WEEKLY;WKST=SU'\n            },\n            { \n                id: 3,\n                startDate: '2021-03-17T07:30',\n                endDate: '2021-03-17T22:30',\n                rRule: 'FREQ=WEEKLY;WKST=SU'\n            },\n            { \n                id: 4,\n                startDate: '2021-03-18T07:30',\n                endDate: '2021-03-18T22:30',\n                rRule: 'FREQ=WEEKLY;WKST=SU'\n            },\n            { \n                id: 5,\n                startDate: '2021-03-19T07:30',\n                endDate: '2021-03-19T22:30',\n                rRule: 'FREQ=WEEKLY;WKST=SU'\n            },\n            { \n                id: 6,\n                startDate: '2021-03-20T07:30',\n                endDate: '2021-03-20T22:30',\n                rRule: 'FREQ=WEEKLY;WKST=SU'\n            },\n            { \n                id: 0,\n                startDate: '2021-03-21T07:30',\n                endDate: '2021-03-21T22:30',\n                rRule: 'FREQ=WEEKLY;WKST=SU'\n            },\n        ],\n    }) \n\n    const handleFocus = (e) => {\n        const fieldName = e.target.name\n        switch (fieldName){\n            case 'firstName':{\n                setFirstNameError(null)\n                setFirstNameHelperText('')\n                break\n            }\n            case 'lastName': {\n                setLastNameError(null)\n                setLastNameHelperText('')\n                break\n            }\n            case 'email': {\n                setEmailError(null)\n                setEmailHelperText('')\n                break\n            }\n            case 'phoneNumber': {\n                setPhoneNumberError(null)\n                setPhoneNumberHelperText('')\n                break\n            }\n        }\n    }\n    \n    const handleFirstName = () => {\n        if (employee.firstName == '') {\n            setFirstNameError(true)\n            setFirstNameHelperText('Gotta have a first name!')\n        }\n        else {\n            setFirstNameError(false)\n            setFirstNameHelperText('')\n        }\n    }\n\n    const handleLastName = () => {\n        if (employee.lastName == '') {\n            setLastNameError(true)\n            setLastNameHelperText('Gotta have a last name!')\n        }\n        else {\n            setLastNameError(false)\n            setLastNameHelperText('')\n        }\n    }\n\n    const handlePhoneNumber = () => {\n        if (employee.phoneNumber.length < 14) {\n            setPhoneNumberError(true)\n            setPhoneNumberHelperText('Phone number is too short!')\n        }\n        else {\n            setPhoneNumberError(false)\n            setPhoneNumberHelperText('')\n        }\n    }\n\n    const handleEmail = () => {\n        if (!isEmailValid(employee.email)) {\n            setEmailError(true)\n            setEmailHelperText(\"That isn't a valid email!\")\n        }\n        else {\n            setEmailError(false)\n            setEmailHelperText('')\n        }\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n\n        handleFirstName()\n        handleLastName()\n        handlePhoneNumber()\n        handleEmail()\n\n        if(firstNameError==false && lastNameError==false && phoneNumberError==false && emailError==false){\n            dispatch(addEmployee(employee))\n            clear()\n        }\n\n    }\n\n    const clear = () => {\n        setEmployee({\n            firstName: '',\n            middleInitial: '',\n            lastName: '',\n            phoneNumber: '',\n            email: '',\n            positions: MAINTENANCE,\n        })\n        setFirstNameError(null)\n        setFirstNameHelperText('')\n        setLastNameError(null)\n        setLastNameHelperText('')\n        setEmailError(null)\n        setEmailHelperText('')\n        setPhoneNumberError(null)\n        setPhoneNumberHelperText('')\n    }\n\n    return (\n        <Card className={classes.card} >\n            <Grid container direction=\"column\" justify=\"center\" xs={12}>\n\n            <Typography className={classes.title} variant=\"h5\">Add New Employee</Typography>\n            <Grid container direction=\"row\" justify=\"center\" xs={12}>\n                <form className={`${classes.root} ${classes.form}`} autoComplete=\"off\" noValidate onSubmit={handleSubmit} >\n\n                <Grid container direction=\"column\" justifty=\"center\" item md={6} xs={12}>\n                    <TextField name=\"firstName\" required error={firstNameError} variant=\"outlined\" label=\"First Name\" value={employee.firstName} helperText={firstNameHelperText} onChange={ (e) => setEmployee({ ...employee, firstName: e.target.value.trim() })}  onFocus={ (e) => handleFocus(e) } />\n                    <TextField name=\"middleInitial\" variant=\"outlined\" label=\"Middle Initial\" value={employee.middleInitial} onChange={ (e) => setEmployee({ ...employee, middleInitial: e.target.value.toUpperCase() })} inputProps={{ maxLength:1 }}/>\n                    <TextField name=\"lastName\" required error={lastNameError} variant=\"outlined\" label=\"Last Name\" value={employee.lastName} helperText={lastNameHelperText} onChange={ (e) => setEmployee({ ...employee, lastName: e.target.value.trim() })}  onFocus={ (e) => handleFocus(e) }/>\n                    <TextField name=\"phoneNumber\" required error={phoneNumberError} variant=\"outlined\" label=\"Phone Number\" value={employee.phoneNumber} helperText={phoneNumberHelperText} onChange={ (e) => setEmployee({...employee, phoneNumber: formatPhoneNumber(e.target.value) })}  onFocus={ (e) => handleFocus(e)} />\n                    <TextField name=\"email\" required error={emailError} variant=\"outlined\" label=\"Email\" value={employee.email} helperText={emailHelperText} onChange={ (e) => setEmployee({...employee, email: e.target.value})} onFocus={ (e) => handleFocus(e) } />\n                    <TextField select name=\"position\" required variant=\"outlined\" label=\"Position\" value={employee.positions} onChange={ (e) => setEmployee({...employee, positions: e.target.value })} >\n                        {positions.map((option) => (\n                            <MenuItem key={option} value={option}>\n                                {option}\n                            </MenuItem>\n                        ))}\n                    </TextField>\n                </Grid>\n\n                <Grid container direction=\"column\" justifty=\"center\" item md={6} xs={12}>\n                    <TextField select name=\"hours\" required variant=\"outlined\" label=\"Desired Hours\" value={employee.desiredHours}>\n                        {hours.map((option) => (\n                            <MenuItem key={option} value={option}>\n                                {option}\n                            </MenuItem>\n                        ))}\n                    </TextField>\n                    <Typography>Availability</Typography>\n                    <AvailabilityComponent />\n\n                </Grid>\n                    <Button className={classes.submitButton} variant=\"contained\" color=\"primary\" size=\"large\"  type='submit' fullWidth>Submit</Button>\n                    <Button className={classes.clearButton} variant=\"contained\" color=\"secondary\" size=\"small\" onClick={clear} fullWidth>Clear</Button>\n                </form>\n            </Grid>\n            </Grid>\n        </Card>\n    )\n}\n\nexport default EmployeeForm\n"]},"metadata":{},"sourceType":"module"}