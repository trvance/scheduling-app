{"ast":null,"code":"var _jsxFileName = \"/Users/tyler/Documents/Programming/ReactApps/scheduler-app-database/client/src/components/schedulePage/dropDownMenu/DropDownMenuEmployees.js\",\n    _s = $RefreshSig$();\n\nimport { useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { Menu, MenuItem, IconButton, Fade, Button } from '@material-ui/core';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport PersonOutlineIcon from '@material-ui/icons/PersonOutline';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DropDownMenuEmployees = ({\n  selectedEmployee,\n  setSelectedEmployee\n}) => {\n  _s();\n\n  const employees = useSelector(state => state.employees);\n  const ITEM_HEIGHT = 50;\n  const [anchorEl, setAnchorEl] = useState(null);\n  const open = Boolean(anchorEl);\n  let name = selectedEmployee ? selectedEmployee.firstName + selectedEmployee.lastName : null;\n\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = event => {\n    setAnchorEl(null);\n  };\n\n  const menuItemClick = event => {\n    const name = event.target.innerText;\n\n    if (name) {\n      const fullEmployee = employees.find(employee => {\n        const fullName = `${employee.firstName} ${employee.lastName}`;\n\n        if (fullName.trim() === name.trim()) {\n          return employee;\n        }\n      });\n      setSelectedEmployee(fullEmployee);\n    }\n\n    handleClose();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      style: {\n        height: 45,\n        width: 250,\n        fontSize: 18\n      },\n      \"aria-label\": \"more\",\n      \"aria-controls\": \"long-menu\",\n      \"aria-haspopup\": \"true\",\n      onClick: handleClick,\n      startIcon: /*#__PURE__*/_jsxDEV(PersonOutlineIcon, {\n        color: \"secondary\",\n        style: {\n          fontSize: 25\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 28\n      }, this),\n      children: [\"selectedEmployee ?\", selectedEmployee.firstName, \" \", selectedEmployee.lastName, \" : employees[0].firstName\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Menu, {\n      id: \"long-menu\",\n      anchorEl: anchorEl,\n      keepMounted: true // value={option}\n      ,\n      open: open,\n      onClose: handleClose,\n      onClick: menuItemClick,\n      PaperProps: {\n        style: {\n          maxHeight: ITEM_HEIGHT * 4.5,\n          width: '40ch'\n        }\n      },\n      children: employees.map(employee => /*#__PURE__*/_jsxDEV(MenuItem, {\n        value: employee._id,\n        children: [employee.firstName, \" \", employee.lastName]\n      }, employee._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DropDownMenuEmployees, \"4nDGhV/YyaTlYljA0v5HuHbg2vU=\", false, function () {\n  return [useSelector];\n});\n\n_c = DropDownMenuEmployees;\nexport default DropDownMenuEmployees;\n\nvar _c;\n\n$RefreshReg$(_c, \"DropDownMenuEmployees\");","map":{"version":3,"sources":["/Users/tyler/Documents/Programming/ReactApps/scheduler-app-database/client/src/components/schedulePage/dropDownMenu/DropDownMenuEmployees.js"],"names":["useSelector","useState","Menu","MenuItem","IconButton","Fade","Button","MoreVertIcon","PersonOutlineIcon","DropDownMenuEmployees","selectedEmployee","setSelectedEmployee","employees","state","ITEM_HEIGHT","anchorEl","setAnchorEl","open","Boolean","name","firstName","lastName","handleClick","event","currentTarget","handleClose","menuItemClick","target","innerText","fullEmployee","find","employee","fullName","trim","height","width","fontSize","style","maxHeight","map","_id"],"mappings":"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","sourcesContent":["import { useSelector } from 'react-redux'\nimport { useState } from 'react'\nimport { Menu, MenuItem, IconButton, Fade, Button } from '@material-ui/core'\nimport MoreVertIcon from '@material-ui/icons/MoreVert'\nimport PersonOutlineIcon from '@material-ui/icons/PersonOutline'\n\n\nconst DropDownMenuEmployees = ({selectedEmployee, setSelectedEmployee}) => {\n    const employees = useSelector((state) => state.employees)\n    const ITEM_HEIGHT = 50\n    const [anchorEl, setAnchorEl] = useState(null)\n    const open = Boolean(anchorEl)\n    let name = selectedEmployee ? selectedEmployee.firstName + selectedEmployee.lastName :\n                                  null\n\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget)\n    }\n    \n    const handleClose = (event) => {\n        setAnchorEl(null);\n    }\n    \n    const menuItemClick = (event) => {\n        const name = event.target.innerText\n\n        if(name) {\n            const fullEmployee = employees.find((employee) => {\n                const fullName = `${employee.firstName} ${employee.lastName}`\n    \n                if(fullName.trim() === name.trim()){\n                    return employee\n                }\n\n            })\n            setSelectedEmployee(fullEmployee)\n        }\n        handleClose()\n    }\n\n\n    return (\n        <div>\n            <Button\n                style={{height:45, width:250, fontSize:18}}\n                aria-label=\"more\"\n                aria-controls=\"long-menu\"\n                aria-haspopup=\"true\"\n                onClick={handleClick}\n                startIcon={<PersonOutlineIcon color='secondary' style={{fontSize:25}}/>}\n            >\n                selectedEmployee ?\n                {selectedEmployee.firstName} {selectedEmployee.lastName} :\n                employees[0].firstName\n            </Button>\n            <Menu\n                id=\"long-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                // value={option}\n                open={open}\n                onClose={handleClose}\n                onClick={menuItemClick}\n                \n                PaperProps={{\n                    style: {\n                        maxHeight: ITEM_HEIGHT * 4.5,\n                        width: '40ch',\n                    },\n                }}\n            >\n            {employees.map((employee) => (\n                <MenuItem key={employee._id} value={employee._id} >\n                    {employee.firstName} {employee.lastName}\n                </MenuItem>\n            ))}\n            </Menu>\n        </div>\n    )\n}\n\nexport default DropDownMenuEmployees\n"]},"metadata":{},"sourceType":"module"}