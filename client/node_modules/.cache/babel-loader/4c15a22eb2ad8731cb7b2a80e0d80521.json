{"ast":null,"code":"var _jsxFileName = \"/Users/tyler/Documents/Programming/ReactApps/scheduler-app-database/client/src/components/employeesPage/employeeForm/EmployeeForm.js\",\n    _s = $RefreshSig$();\n\nimport { Card, Typography, TextField, Button, MenuItem } from \"@material-ui/core\";\nimport { useState } from 'react';\nimport useStyles from './styles';\nimport { useDispatch } from 'react-redux';\nimport { addEmployee } from '../../../actions/employees';\nimport { formatPhoneNumber } from '../../../formatAndValidations/formatPhoneNumber';\nimport { isEmailValid } from '../../../formatAndValidations/validateEmail';\nimport { HOTLINE, COLDLINE, MAINTENANCE, FLOATER, BACKUPCASH, CASHIER, MEATPREP } from '../../../constants/positions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst positions = [MAINTENANCE, HOTLINE, COLDLINE, FLOATER, BACKUPCASH, CASHIER, MEATPREP];\n\nconst EmployeeForm = () => {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [emailError, setEmailError] = useState(false);\n  const [emailHelperText, setEmailHelperText] = useState('');\n  const [firstNameError, setFirstNameError] = useState(false);\n  const [firstNameHelperText, setFirstNameHelperText] = useState('');\n  const [lastNameError, setLastNameError] = useState(false);\n  const [lastNameHelperText, setLastNameHelperText] = useState('');\n  const [employee, setEmployee] = useState({\n    firstName: '',\n    middleInitial: '',\n    lastName: '',\n    phoneNumber: '',\n    email: '',\n    positions: MAINTENANCE,\n    availability: [{\n      id: 1,\n      startDate: '2021-03-15T07:30',\n      endDate: '2021-03-15T22:30',\n      rRule: 'FREQ=WEEKLY;WKST=SU'\n    }, {\n      id: 2,\n      startDate: '2021-03-16T07:30',\n      endDate: '2021-03-16T22:30',\n      rRule: 'FREQ=WEEKLY;WKST=SU'\n    }, {\n      id: 3,\n      startDate: '2021-03-17T07:30',\n      endDate: '2021-03-17T22:30',\n      rRule: 'FREQ=WEEKLY;WKST=SU'\n    }, {\n      id: 4,\n      startDate: '2021-03-18T07:30',\n      endDate: '2021-03-18T22:30',\n      rRule: 'FREQ=WEEKLY;WKST=SU'\n    }, {\n      id: 5,\n      startDate: '2021-03-19T07:30',\n      endDate: '2021-03-19T22:30',\n      rRule: 'FREQ=WEEKLY;WKST=SU'\n    }, {\n      id: 6,\n      startDate: '2021-03-20T07:30',\n      endDate: '2021-03-20T22:30',\n      rRule: 'FREQ=WEEKLY;WKST=SU'\n    }, {\n      id: 0,\n      startDate: '2021-03-21T07:30',\n      endDate: '2021-03-21T22:30',\n      rRule: 'FREQ=WEEKLY;WKST=SU'\n    }]\n  });\n\n  const handleClick = e => {\n    const fieldName = e.target.name;\n\n    switch (fieldName) {\n      case 'email':\n        {\n          setEmailError(false);\n          setEmailHelperText('');\n          break;\n        }\n\n      case 'firstName':\n        {\n          setFirstNameError(false);\n          setFirstNameHelperText('');\n          break;\n        }\n\n      case 'lastName':\n        {\n          setLastNameError(false);\n          setLastNameHelperText('');\n          break;\n        }\n    }\n  };\n\n  const handleFirstName = e => {\n    if (employee.firstName == '') {\n      setFirstNameError(true);\n      setFirstNameHelperText('Gotta have a first name!');\n    } else {\n      setFirstNameError(false);\n      setFirstNameHelperText('');\n    }\n  };\n\n  const handleLastName = e => {\n    if (employee.lastName == '') {\n      setLastNameError(true);\n      setLastNameHelperText('Gotta have a last name!');\n    } else {\n      setLastNameError(false);\n      setLastNameHelperText('');\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (firstNameError == false && lastNameError == false && emailError == false) {\n      dispatch(addEmployee(employee));\n      clear();\n    }\n  };\n\n  const clear = () => {\n    setEmployee({\n      firstName: '',\n      middleInitial: '',\n      lastName: '',\n      phoneNumber: '',\n      email: '',\n      positions: MAINTENANCE\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.card,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: `${classes.root} ${classes.form}`,\n      autoComplete: \"off\",\n      noValidate: true,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        name: \"firstName\",\n        required: true,\n        error: firstNameError,\n        variant: \"outlined\",\n        label: \"First Name\",\n        fullWidth: true,\n        value: employee.firstName,\n        helperText: firstNameHelperText,\n        onChange: e => setEmployee({ ...employee,\n          firstName: e.target.value.trim()\n        }),\n        onBlur: handleFirstName,\n        onClick: e => setFirstNameError(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"middleInitial\",\n        variant: \"outlined\",\n        label: \"Middle Initial\",\n        fullWidth: true,\n        value: employee.middleInitial,\n        onChange: e => setEmployee({ ...employee,\n          middleInitial: e.target.value.toUpperCase()\n        }),\n        inputProps: {\n          maxLength: 1\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"lastName\",\n        required: true,\n        error: lastNameError,\n        variant: \"outlined\",\n        label: \"Last Name\",\n        fullWidth: true,\n        value: employee.lastName,\n        helperText: lastNameHelperText,\n        onChange: e => setEmployee({ ...employee,\n          lastName: e.target.value.trim()\n        }),\n        onBlur: handleLastName,\n        onClick: e => setLastNameError(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"phoneNumber\",\n        required: true,\n        error: phoneNumberError,\n        variant: \"outlined\",\n        label: \"Phone Number\",\n        fullWidth: true,\n        value: employee.phoneNumber,\n        onChange: e => setEmployee({ ...employee,\n          phoneNumber: formatPhoneNumber(e.target.value)\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"email\",\n        required: true,\n        error: emailError,\n        variant: \"outlined\",\n        label: \"Email\",\n        fullWidth: true,\n        value: employee.email,\n        helperText: emailHelperText,\n        onChange: e => setEmployee({ ...employee,\n          email: e.target.value\n        }),\n        onClick: e => handleClick(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        select: true,\n        name: \"position\",\n        required: true,\n        variant: \"outlined\",\n        label: \"Position\",\n        fullWidth: true,\n        value: employee.positions,\n        onChange: e => setEmployee({ ...employee,\n          positions: e.target.value\n        }),\n        children: positions.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: option,\n          children: option\n        }, option, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.buttonSubmit,\n        variant: \"contained\",\n        color: \"primary\",\n        size: \"large\",\n        type: \"submit\",\n        fullWidth: true,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EmployeeForm, \"ykRCoLitOpI3j+t7Er7csfCos7E=\", false, function () {\n  return [useStyles, useDispatch];\n});\n\n_c = EmployeeForm;\nexport default EmployeeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmployeeForm\");","map":{"version":3,"sources":["/Users/tyler/Documents/Programming/ReactApps/scheduler-app-database/client/src/components/employeesPage/employeeForm/EmployeeForm.js"],"names":["Card","Typography","TextField","Button","MenuItem","useState","useStyles","useDispatch","addEmployee","formatPhoneNumber","isEmailValid","HOTLINE","COLDLINE","MAINTENANCE","FLOATER","BACKUPCASH","CASHIER","MEATPREP","positions","EmployeeForm","classes","dispatch","emailError","setEmailError","emailHelperText","setEmailHelperText","firstNameError","setFirstNameError","firstNameHelperText","setFirstNameHelperText","lastNameError","setLastNameError","lastNameHelperText","setLastNameHelperText","employee","setEmployee","firstName","middleInitial","lastName","phoneNumber","email","availability","id","startDate","endDate","rRule","handleClick","e","fieldName","target","name","handleFirstName","handleLastName","handleSubmit","preventDefault","clear","card","root","form","value","trim","toUpperCase","maxLength","phoneNumberError","map","option","buttonSubmit"],"mappings":"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","sourcesContent":["import { Card, Typography, TextField, Button, MenuItem } from \"@material-ui/core\"\nimport { useState } from 'react'\nimport useStyles from './styles'\nimport { useDispatch } from 'react-redux'\nimport { addEmployee } from '../../../actions/employees'\nimport {formatPhoneNumber} from '../../../formatAndValidations/formatPhoneNumber'\nimport {isEmailValid} from '../../../formatAndValidations/validateEmail'\nimport { HOTLINE, COLDLINE, MAINTENANCE, FLOATER, BACKUPCASH, CASHIER, MEATPREP } from '../../../constants/positions'\n\n\nconst positions = [ MAINTENANCE, HOTLINE, COLDLINE, FLOATER, BACKUPCASH, CASHIER, MEATPREP]\n\nconst EmployeeForm = () => {\n    const classes = useStyles()\n    const dispatch = useDispatch()\n\n    const [emailError, setEmailError] = useState(false)\n    const [emailHelperText, setEmailHelperText] = useState('')\n    const [firstNameError, setFirstNameError] = useState(false)\n    const [firstNameHelperText, setFirstNameHelperText] = useState('')\n    const [lastNameError, setLastNameError] = useState(false)\n    const [lastNameHelperText, setLastNameHelperText] = useState('')\n\n    const [employee, setEmployee] = useState({\n        firstName: '',\n        middleInitial: '',\n        lastName: '',\n        phoneNumber: '',\n        email: '',\n        positions: MAINTENANCE,\n        availability: [\n            { \n                id: 1,\n                startDate: '2021-03-15T07:30',\n                endDate: '2021-03-15T22:30',\n                rRule: 'FREQ=WEEKLY;WKST=SU'\n            },\n            { \n                id: 2,\n                startDate: '2021-03-16T07:30',\n                endDate: '2021-03-16T22:30',\n                rRule: 'FREQ=WEEKLY;WKST=SU'\n            },\n            { \n                id: 3,\n                startDate: '2021-03-17T07:30',\n                endDate: '2021-03-17T22:30',\n                rRule: 'FREQ=WEEKLY;WKST=SU'\n            },\n            { \n                id: 4,\n                startDate: '2021-03-18T07:30',\n                endDate: '2021-03-18T22:30',\n                rRule: 'FREQ=WEEKLY;WKST=SU'\n            },\n            { \n                id: 5,\n                startDate: '2021-03-19T07:30',\n                endDate: '2021-03-19T22:30',\n                rRule: 'FREQ=WEEKLY;WKST=SU'\n            },\n            { \n                id: 6,\n                startDate: '2021-03-20T07:30',\n                endDate: '2021-03-20T22:30',\n                rRule: 'FREQ=WEEKLY;WKST=SU'\n            },\n            { \n                id: 0,\n                startDate: '2021-03-21T07:30',\n                endDate: '2021-03-21T22:30',\n                rRule: 'FREQ=WEEKLY;WKST=SU'\n            },\n        ],\n    }) \n\n    const handleClick = (e) => {\n        const fieldName = e.target.name\n        switch (fieldName){\n            case 'email': {\n                setEmailError(false)\n                setEmailHelperText('')\n                break\n            }\n            case 'firstName':{\n                setFirstNameError(false)\n                setFirstNameHelperText('')\n                break\n            }\n            case 'lastName': {\n                setLastNameError(false)\n                setLastNameHelperText('')\n                break\n            }\n        }\n    }\n    \n    const handleFirstName = (e) => {\n        if (employee.firstName == '') {\n            setFirstNameError(true)\n            setFirstNameHelperText('Gotta have a first name!')\n        }\n        else {\n            setFirstNameError(false)\n            setFirstNameHelperText('')\n        }\n    }\n\n    const handleLastName = (e) => {\n        if (employee.lastName == '') {\n            setLastNameError(true)\n            setLastNameHelperText('Gotta have a last name!')\n        }\n        else {\n            setLastNameError(false)\n            setLastNameHelperText('')\n        }\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n\n        if(firstNameError == false && lastNameError == false && emailError == false){\n            dispatch(addEmployee(employee))\n            clear()\n        }\n\n    }\n\n    const clear = () => {\n        setEmployee({firstName: '', middleInitial: '', lastName: '', phoneNumber: '', email: '', positions: MAINTENANCE})\n    }\n\n    return (\n        <Card className={classes.card} >\n            <form className={`${classes.root} ${classes.form}`} autoComplete=\"off\" noValidate onSubmit={handleSubmit} >\n                {/* <Typography variant=\"h6\">{currentId ? 'Editing' : 'Creating'} a Memory</Typography> */}\n                <TextField name=\"firstName\" required error={firstNameError} variant=\"outlined\" label=\"First Name\" fullWidth value={employee.firstName} helperText={firstNameHelperText} onChange={ (e) => setEmployee({ ...employee, firstName: e.target.value.trim() })} onBlur={ handleFirstName } onClick={ (e) => setFirstNameError(false) } />\n                <TextField name=\"middleInitial\" variant=\"outlined\" label=\"Middle Initial\" fullWidth value={employee.middleInitial} onChange={ (e) => setEmployee({ ...employee, middleInitial: e.target.value.toUpperCase() })} inputProps={{ maxLength:1 }}/>\n                <TextField name=\"lastName\" required error={lastNameError} variant=\"outlined\" label=\"Last Name\" fullWidth value={employee.lastName} helperText={lastNameHelperText} onChange={ (e) => setEmployee({ ...employee, lastName: e.target.value.trim() })} onBlur={ handleLastName } onClick={ (e) => setLastNameError(false) }/>\n                <TextField name=\"phoneNumber\" required error={phoneNumberError} variant=\"outlined\" label=\"Phone Number\" fullWidth value={employee.phoneNumber} onChange={ (e) => setEmployee({...employee, phoneNumber: formatPhoneNumber(e.target.value) })} />\n                <TextField name=\"email\" required error={emailError} variant=\"outlined\" label=\"Email\" fullWidth value={employee.email} helperText={emailHelperText} onChange={ (e) => setEmployee({...employee, email: e.target.value})} onClick={ (e) => handleClick(e) } />\n                <TextField select name=\"position\" required variant=\"outlined\" label=\"Position\" fullWidth value={employee.positions} onChange={ (e) => setEmployee({...employee, positions: e.target.value })} >\n                    {positions.map((option) => (\n                        <MenuItem key={option} value={option}>\n                            {option}\n                        </MenuItem>\n                    ))}\n                </TextField>\n                <Button className={classes.buttonSubmit} variant=\"contained\" color=\"primary\" size=\"large\"  type='submit' fullWidth>Submit</Button>\n                {/* <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={clear} fullWidth>Clear</Button> */}\n            </form>\n        </Card>\n    )\n}\n\nexport default EmployeeForm\n"]},"metadata":{},"sourceType":"module"}