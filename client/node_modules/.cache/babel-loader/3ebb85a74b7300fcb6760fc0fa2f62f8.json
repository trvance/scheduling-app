{"ast":null,"code":"var _jsxFileName = \"/Users/tyler/Documents/Programming/ReactApps/scheduler-app-database/client/src/components/employeesPage/employeeForm/phoneNumberInput/PhoneNumberInput.js\",\n    _s = $RefreshSig$();\n\nimport PhoneInput from 'react-phone-input-material-ui';\nimport { TextField } from '@material-ui/core';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function formatPhoneNumber(value) {\n  // if input value is falsy eg if the user deletes the input, then just return\n  if (!value) return value; // clean the input for any non-digit values.\n\n  const phoneNumber = value.replace(/[^\\d]/g, \"\"); // phoneNumberLength is used to know when to apply our formatting for the phone number\n\n  const phoneNumberLength = phoneNumber.length; // we need to return the value with no formatting if its less then four digits\n  // this is to avoid weird behavior that occurs if you  format the area code to early\n\n  if (phoneNumberLength < 4) return phoneNumber; // if phoneNumberLength is greater than 4 and less the 7 we start to return\n  // the formatted number\n\n  if (phoneNumberLength < 7) {\n    return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3)}`;\n  } // finally, if the phoneNumberLength is greater then seven, we add the last\n  // bit of formatting and return it.\n\n\n  return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3, 6)}-${phoneNumber.slice(6, 10)}`;\n}\nexport default function App() {\n  _s();\n\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInput = e => {\n    // this is where we'll call the phoneNumberFormatter function\n    const formattedPhoneNumber = formatPhoneNumber(e.target.value); // we'll set the input value using our setInputValue\n\n    setInputValue(formattedPhoneNumber);\n  };\n\n  return /*#__PURE__*/_jsxDEV(TextField, {\n    variant: \"outlined\",\n    name: \"phoneNumber\",\n    required: true,\n    variant: \"outlined\",\n    label: \"Phone Number\",\n    fullWidth: true,\n    onChange: e => handleInput(e),\n    value: inputValue\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 10\n  }, this);\n}\n\n_s(App, \"iEYviHCJXqr/rxvP+SpzgvyJcbo=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/tyler/Documents/Programming/ReactApps/scheduler-app-database/client/src/components/employeesPage/employeeForm/phoneNumberInput/PhoneNumberInput.js"],"names":["PhoneInput","TextField","useState","formatPhoneNumber","value","phoneNumber","replace","phoneNumberLength","length","slice","App","inputValue","setInputValue","handleInput","e","formattedPhoneNumber","target"],"mappings":";;;AAAA,OAAOA,UAAP,MAAuB,+BAAvB;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,OAAO,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AACvC;AACA,MAAI,CAACA,KAAL,EAAY,OAAOA,KAAP,CAF2B,CAIvC;;AACA,QAAMC,WAAW,GAAGD,KAAK,CAACE,OAAN,CAAc,QAAd,EAAwB,EAAxB,CAApB,CALuC,CAOvC;;AACA,QAAMC,iBAAiB,GAAGF,WAAW,CAACG,MAAtC,CARuC,CAUvC;AACA;;AACA,MAAID,iBAAiB,GAAG,CAAxB,EAA2B,OAAOF,WAAP,CAZY,CAcvC;AACA;;AACA,MAAIE,iBAAiB,GAAG,CAAxB,EAA2B;AACzB,WAAQ,IAAGF,WAAW,CAACI,KAAZ,CAAkB,CAAlB,EAAqB,CAArB,CAAwB,KAAIJ,WAAW,CAACI,KAAZ,CAAkB,CAAlB,CAAqB,EAA5D;AACD,GAlBsC,CAoBvC;AACA;;;AACA,SAAQ,IAAGJ,WAAW,CAACI,KAAZ,CAAkB,CAAlB,EAAqB,CAArB,CAAwB,KAAIJ,WAAW,CAACI,KAAZ,CACrC,CADqC,EAErC,CAFqC,CAGrC,IAAGJ,WAAW,CAACI,KAAZ,CAAkB,CAAlB,EAAqB,EAArB,CAAyB,EAH9B;AAID;AAED,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,EAAD,CAA5C;;AAEA,QAAMW,WAAW,GAAIC,CAAD,IAAO;AACzB;AACA,UAAMC,oBAAoB,GAAGZ,iBAAiB,CAACW,CAAC,CAACE,MAAF,CAASZ,KAAV,CAA9C,CAFyB,CAGzB;;AACAQ,IAAAA,aAAa,CAACG,oBAAD,CAAb;AACD,GALD;;AAOA,sBAAO,QAAC,SAAD;AAAW,IAAA,OAAO,EAAC,UAAnB;AAA8B,IAAA,IAAI,EAAC,aAAnC;AAAiD,IAAA,QAAQ,MAAzD;AAA0D,IAAA,OAAO,EAAC,UAAlE;AAA6E,IAAA,KAAK,EAAC,cAAnF;AAAkG,IAAA,SAAS,MAA3G;AAA4G,IAAA,QAAQ,EAAGD,CAAD,IAAOD,WAAW,CAACC,CAAD,CAAxI;AAA6I,IAAA,KAAK,EAAEH;AAApJ;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAXuBD,G;;KAAAA,G","sourcesContent":["import PhoneInput from 'react-phone-input-material-ui'\nimport { TextField } from '@material-ui/core'\nimport { useState } from 'react'\n\nexport function formatPhoneNumber(value) {\n  // if input value is falsy eg if the user deletes the input, then just return\n  if (!value) return value;\n\n  // clean the input for any non-digit values.\n  const phoneNumber = value.replace(/[^\\d]/g, \"\");\n\n  // phoneNumberLength is used to know when to apply our formatting for the phone number\n  const phoneNumberLength = phoneNumber.length;\n\n  // we need to return the value with no formatting if its less then four digits\n  // this is to avoid weird behavior that occurs if you  format the area code to early\n  if (phoneNumberLength < 4) return phoneNumber;\n\n  // if phoneNumberLength is greater than 4 and less the 7 we start to return\n  // the formatted number\n  if (phoneNumberLength < 7) {\n    return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3)}`;\n  }\n\n  // finally, if the phoneNumberLength is greater then seven, we add the last\n  // bit of formatting and return it.\n  return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(\n    3,\n    6\n  )}-${phoneNumber.slice(6, 10)}`;\n}\n\nexport default function App() {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInput = (e) => {\n    // this is where we'll call the phoneNumberFormatter function\n    const formattedPhoneNumber = formatPhoneNumber(e.target.value);\n    // we'll set the input value using our setInputValue\n    setInputValue(formattedPhoneNumber);\n  };\n\n  return <TextField variant='outlined' name=\"phoneNumber\" required variant=\"outlined\" label=\"Phone Number\" fullWidth onChange={(e) => handleInput(e)} value={inputValue} />;\n}\n"]},"metadata":{},"sourceType":"module"}