{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport InputSmart from './InputSmart';\nimport InputBasic from './InputBasic';\nimport usePhoneDigits from './usePhoneDigits';\nexport function createInput(defaultMetadata) {\n  function PhoneInput(_ref, ref) {\n    var country = _ref.country,\n        defaultCountry = _ref.defaultCountry,\n        useNationalFormatForDefaultCountryValue = _ref.useNationalFormatForDefaultCountryValue,\n        value = _ref.value,\n        onChange = _ref.onChange,\n        metadata = _ref.metadata,\n        smartCaret = _ref.smartCaret,\n        international = _ref.international,\n        withCountryCallingCode = _ref.withCountryCallingCode,\n        rest = _objectWithoutProperties(_ref, [\"country\", \"defaultCountry\", \"useNationalFormatForDefaultCountryValue\", \"value\", \"onChange\", \"metadata\", \"smartCaret\", \"international\", \"withCountryCallingCode\"]); // \"Phone digits\" includes not only \"digits\" but also a `+` sign.\n\n\n    var _usePhoneDigits = usePhoneDigits({\n      value: value,\n      onChange: onChange,\n      country: country,\n      defaultCountry: defaultCountry,\n      international: international,\n      withCountryCallingCode: withCountryCallingCode,\n      useNationalFormatForDefaultCountryValue: useNationalFormatForDefaultCountryValue,\n      metadata: metadata\n    }),\n        _usePhoneDigits2 = _slicedToArray(_usePhoneDigits, 2),\n        phoneDigits = _usePhoneDigits2[0],\n        setPhoneDigits = _usePhoneDigits2[1];\n\n    var InputComponent = smartCaret ? InputSmart : InputBasic;\n    return React.createElement(InputComponent, _extends({}, rest, {\n      ref: ref,\n      metadata: metadata,\n      international: international,\n      withCountryCallingCode: withCountryCallingCode,\n      country: country || defaultCountry,\n      value: phoneDigits,\n      onChange: setPhoneDigits\n    }));\n  }\n\n  PhoneInput = React.forwardRef(PhoneInput);\n  PhoneInput.propTypes = {\n    /**\r\n     * HTML `<input/>` `type` attribute.\r\n     */\n    type: PropTypes.string,\n\n    /**\r\n     * HTML `<input/>` `autocomplete` attribute.\r\n     */\n    autoComplete: PropTypes.string,\n\n    /**\r\n     * The phone number (in E.164 format).\r\n     * Examples: `undefined`, `\"+12\"`, `\"+12133734253\"`.\r\n     */\n    value: PropTypes.string,\n\n    /**\r\n     * Updates the `value`.\r\n     */\n    onChange: PropTypes.func.isRequired,\n\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * as a national phone number (example: `(213) 373-4253`),\r\n     * or as an international phone number without \"country calling code\"\r\n     * if `international` property is passed (example: `213 373 4253`).\r\n     * Example: \"US\".\r\n     * If no `country` is passed then `value`\r\n     * is formatted as an international phone number.\r\n     * (example: `+1 213 373 4253`)\r\n     */\n    country: PropTypes.string,\n\n    /**\r\n     * A two-letter country code for formatting `value`\r\n     * when a user inputs a national phone number (example: `(213) 373-4253`).\r\n     * The user can still input a phone number in international format.\r\n     * Example: \"US\".\r\n     * `country` and `defaultCountry` properties are mutually exclusive.\r\n     */\n    defaultCountry: PropTypes.string,\n\n    /**\r\n     * If `country` property is passed along with `international={true}` property\r\n     * then the phone number will be input in \"international\" format for that `country`\r\n     * (without \"country calling code\").\r\n     * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n     * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n     * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n     * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n     * (without \"country calling code\" `+1`).\r\n     */\n    international: PropTypes.bool,\n\n    /**\r\n     * If `country` and `international` properties are set,\r\n     * then by default it won't include \"country calling code\" in the input field.\r\n     * To change that, pass `withCountryCallingCode` property,\r\n     * and it will include \"country calling code\" in the input field.\r\n     */\n    withCountryCallingCode: PropTypes.bool,\n\n    /**\r\n     * The `<input/>` component.\r\n     */\n    inputComponent: PropTypes.elementType,\n\n    /**\r\n     * By default, the caret position is being \"intelligently\" managed\r\n     * while a user inputs a phone number.\r\n     * This \"smart\" caret behavior can be turned off\r\n     * by passing `smartCaret={false}` property.\r\n     * This is just an \"escape hatch\" for any possible caret position issues.\r\n     */\n    // Is `true` by default.\n    smartCaret: PropTypes.bool.isRequired,\n\n    /**\r\n     * When `defaultCountry` is defined and the initial `value` corresponds to `defaultCountry`,\r\n     * then the `value` will be formatted as a national phone number by default.\r\n     * To format the initial `value` of `defaultCountry` as an international number instead\r\n     * set `useNationalFormatForDefaultCountryValue` property to `true`.\r\n     */\n    useNationalFormatForDefaultCountryValue: PropTypes.bool.isRequired,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: PropTypes.object.isRequired\n  };\n  PhoneInput.defaultProps = {\n    /**\r\n     * HTML `<input/>` `type=\"tel\"`.\r\n     */\n    type: 'tel',\n\n    /**\r\n     * Remember (and autofill) the value as a phone number.\r\n     */\n    autoComplete: 'tel',\n\n    /**\r\n     * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n     */\n    smartCaret: true,\n\n    /**\r\n     * Set to `true` to force international phone number format\r\n     * (without \"country calling code\") when `country` is specified.\r\n     */\n    // international: false,\n\n    /**\r\n     * Prefer national format when formatting E.164 phone number `value`\r\n     * corresponding to `defaultCountry`.\r\n     */\n    useNationalFormatForDefaultCountryValue: true,\n\n    /**\r\n     * `libphonenumber-js` metadata.\r\n     */\n    metadata: defaultMetadata\n  };\n  return PhoneInput;\n}\nexport default createInput();","map":{"version":3,"sources":["../source/PhoneInput.js"],"names":["country","defaultCountry","useNationalFormatForDefaultCountryValue","value","onChange","metadata","smartCaret","international","withCountryCallingCode","rest","phoneDigits","setPhoneDigits","usePhoneDigits","InputComponent","PhoneInput","React","type","PropTypes","autoComplete","inputComponent","isRequired","defaultMetadata","createInput"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport InputSmart from './InputSmart'\r\nimport InputBasic from './InputBasic'\r\nimport usePhoneDigits from './usePhoneDigits'\r\n\r\nexport function createInput(defaultMetadata) {\r\n\tfunction PhoneInput({\r\n\t\tcountry,\r\n\t\tdefaultCountry,\r\n\t\tuseNationalFormatForDefaultCountryValue,\r\n\t\tvalue,\r\n\t\tonChange,\r\n\t\tmetadata,\r\n\t\tsmartCaret,\r\n\t\tinternational,\r\n\t\twithCountryCallingCode,\r\n\t\t...rest\r\n\t}, ref) {\r\n\t\t// \"Phone digits\" includes not only \"digits\" but also a `+` sign.\r\n\t\tconst [\r\n\t\t\tphoneDigits,\r\n\t\t\tsetPhoneDigits\r\n\t\t] = usePhoneDigits({\r\n\t\t\tvalue,\r\n\t\t\tonChange,\r\n\t\t\tcountry,\r\n\t\t\tdefaultCountry,\r\n\t\t\tinternational,\r\n\t\t\twithCountryCallingCode,\r\n\t\t\tuseNationalFormatForDefaultCountryValue,\r\n\t\t\tmetadata\r\n\t\t})\r\n\t\tconst InputComponent = smartCaret ? InputSmart : InputBasic\r\n\t\treturn (\r\n\t\t\t<InputComponent\r\n\t\t\t\t{...rest}\r\n\t\t\t\tref={ref}\r\n\t\t\t\tmetadata={metadata}\r\n\t\t\t\tinternational={international}\r\n\t\t\t\twithCountryCallingCode={withCountryCallingCode}\r\n\t\t\t\tcountry={country || defaultCountry}\r\n\t\t\t\tvalue={phoneDigits}\r\n\t\t\t\tonChange={setPhoneDigits} />\r\n\t\t)\r\n\t}\r\n\r\n\tPhoneInput = React.forwardRef(PhoneInput)\r\n\r\n\tPhoneInput.propTypes = {\r\n\t\t/**\r\n\t\t * HTML `<input/>` `type` attribute.\r\n\t\t */\r\n\t\ttype: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * HTML `<input/>` `autocomplete` attribute.\r\n\t\t */\r\n\t\tautoComplete: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * The phone number (in E.164 format).\r\n\t\t * Examples: `undefined`, `\"+12\"`, `\"+12133734253\"`.\r\n\t\t */\r\n\t\tvalue: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * Updates the `value`.\r\n\t\t */\r\n\t\tonChange: PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A two-letter country code for formatting `value`\r\n\t\t * as a national phone number (example: `(213) 373-4253`),\r\n\t\t * or as an international phone number without \"country calling code\"\r\n\t\t * if `international` property is passed (example: `213 373 4253`).\r\n\t\t * Example: \"US\".\r\n\t\t * If no `country` is passed then `value`\r\n\t\t * is formatted as an international phone number.\r\n\t\t * (example: `+1 213 373 4253`)\r\n\t\t */\r\n\t\tcountry: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * A two-letter country code for formatting `value`\r\n\t\t * when a user inputs a national phone number (example: `(213) 373-4253`).\r\n\t\t * The user can still input a phone number in international format.\r\n\t\t * Example: \"US\".\r\n\t\t * `country` and `defaultCountry` properties are mutually exclusive.\r\n\t\t */\r\n\t\tdefaultCountry: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * If `country` property is passed along with `international={true}` property\r\n\t\t * then the phone number will be input in \"international\" format for that `country`\r\n\t\t * (without \"country calling code\").\r\n\t\t * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n\t\t * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n\t\t * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n\t\t * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n\t\t * (without \"country calling code\" `+1`).\r\n\t\t */\r\n\t\tinternational: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * If `country` and `international` properties are set,\r\n\t\t * then by default it won't include \"country calling code\" in the input field.\r\n\t\t * To change that, pass `withCountryCallingCode` property,\r\n\t\t * and it will include \"country calling code\" in the input field.\r\n\t\t */\r\n\t\twithCountryCallingCode: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * The `<input/>` component.\r\n\t\t */\r\n\t\tinputComponent: PropTypes.elementType,\r\n\r\n\t\t/**\r\n\t\t * By default, the caret position is being \"intelligently\" managed\r\n\t\t * while a user inputs a phone number.\r\n\t\t * This \"smart\" caret behavior can be turned off\r\n\t\t * by passing `smartCaret={false}` property.\r\n\t\t * This is just an \"escape hatch\" for any possible caret position issues.\r\n\t\t */\r\n\t\t// Is `true` by default.\r\n\t\tsmartCaret: PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * When `defaultCountry` is defined and the initial `value` corresponds to `defaultCountry`,\r\n\t\t * then the `value` will be formatted as a national phone number by default.\r\n\t\t * To format the initial `value` of `defaultCountry` as an international number instead\r\n\t\t * set `useNationalFormatForDefaultCountryValue` property to `true`.\r\n\t\t */\r\n\t\tuseNationalFormatForDefaultCountryValue: PropTypes.bool.isRequired,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: PropTypes.object.isRequired\r\n\t}\r\n\r\n\tPhoneInput.defaultProps = {\r\n\t\t/**\r\n\t\t * HTML `<input/>` `type=\"tel\"`.\r\n\t\t */\r\n\t\ttype: 'tel',\r\n\r\n\t\t/**\r\n\t\t * Remember (and autofill) the value as a phone number.\r\n\t\t */\r\n\t\tautoComplete: 'tel',\r\n\r\n\t\t/**\r\n\t\t * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n\t\t */\r\n\t\tsmartCaret: true,\r\n\r\n\t\t/**\r\n\t\t * Set to `true` to force international phone number format\r\n\t\t * (without \"country calling code\") when `country` is specified.\r\n\t\t */\r\n\t\t// international: false,\r\n\r\n\t\t/**\r\n\t\t * Prefer national format when formatting E.164 phone number `value`\r\n\t\t * corresponding to `defaultCountry`.\r\n\t\t */\r\n\t\tuseNationalFormatForDefaultCountryValue: true,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: defaultMetadata\r\n\t}\r\n\r\n\treturn PhoneInput\r\n}\r\n\r\nexport default createInput()"]},"metadata":{},"sourceType":"module"}