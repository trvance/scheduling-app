{"ast":null,"code":"var _jsxFileName = \"/Users/tyler/Documents/Programming/ReactApps/scheduler-app-database/client/src/components/homePage/generateScheduleButton/GenerateScheduleButton.js\",\n    _s = $RefreshSig$();\n\nimport { Button, Typography, Grid } from \"@material-ui/core\";\nimport { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { editEmployee, getEmployees } from '../../../actions/employees';\nimport weekShifts from '../../../testData/weekShifts';\nimport theme from '../../../themes/mintTheme';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GenerateScheduleButton = ({\n  setPage\n}) => {\n  _s();\n\n  let shifts = weekShifts;\n  const dispatch = useDispatch();\n  const employees = useSelector(state => state.employees);\n  const ignoreDesiredHours = false;\n  const [employee, setEmployee] = useState(null);\n  const [schedule, setSchedule] = useState(null);\n  const [scheduleStack, setScheduleStack] = useState([]);\n  const [currentId, setCurrentId] = useState(null);\n  const NOON = 12;\n\n  const randomizeShifts = array => {\n    let shuffledArray = [];\n    let shift = null;\n\n    for (let i = array.length - 1; i >= 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n      shift = array[i];\n\n      for (let x = shift.length - 1; x >= 0; x--) {\n        const y = Math.floor(Math.random() * (x + 1));\n        [array[i][x], array[i][y]] = [array[i][y], array[i][x]];\n        shift = array[i][x];\n        shuffledArray.push(shift);\n      }\n    }\n\n    return shuffledArray;\n  };\n\n  const createSchedule = shifts => {\n    let scheduledEmployees = [];\n    let blankEmployees = eraseSchedules(employees);\n\n    while (shifts.length > 0) {\n      let currentEmployee = blankEmployees[Math.floor(Math.random() * blankEmployees.length)];\n      let currentEmployeeId = currentEmployee._id;\n      let shift = shifts.splice(Math.floor(Math.random() * shifts.length), 1)[0];\n      const isEmployeeAvailable = canEmployeeTakeShift(currentEmployee, shift);\n\n      if (isEmployeeAvailable) {\n        currentEmployee.weekSchedule.push(shift);\n        calculateNumHours(currentEmployee, shift);\n\n        if (!scheduledEmployees.some(employee => employee._id === currentEmployeeId)) {\n          scheduledEmployees.push(currentEmployee);\n        }\n      }\n    }\n\n    console.log(scheduledEmployees);\n    return scheduledEmployees;\n  };\n\n  const canEmployeeTakeShift = (employee, shift) => {\n    const date = new Date(shift.startDate);\n    const dayOfWeek = date.getDay();\n    const shiftStartTime = convertTimeToNumber(shift.startDate.split(' ')[4]);\n    const day = shift.startDate.split(' ')[0];\n    const availabilityDay = dayOfWeek === 0 ? 6 : dayOfWeek - 1;\n    const isAvailableMorning = employee.availability[availabilityDay].morning;\n    const isAvailableEvening = employee.availability[availabilityDay].evening;\n    const isMorningShift = shiftStartTime < NOON ? true : false;\n    const isAlreadyWorking = checkIfWorking(employee, day, isMorningShift);\n    const isTrained = checkIfTrained(employee, shift); // calculateNumHours(employee)\n\n    return isAlreadyWorking ? false : !isTrained ? false : isMorningShift && isAvailableMorning ? true : !isMorningShift && isAvailableEvening ? true : false;\n  };\n\n  const checkIfWorking = (employee, day, isMorningShift) => {\n    let numShiftsInDay = 0;\n    employee.weekSchedule.forEach(shift => {\n      if (shift.startDate.includes(day)) {\n        numShiftsInDay++;\n      }\n    });\n    if (numShiftsInDay > 1) return true;\n    const employeeShift = employee.weekSchedule.find(shift => shift.startDate.includes(day));\n\n    if (employeeShift) {\n      const employeeShiftTime = convertTimeToNumber(employeeShift.startDate.split(' ')[4]);\n      if (isMorningShift && employeeShiftTime < NOON) return true;\n      if (isMorningShift && employeeShiftTime > NOON) return false;\n      if (!isMorningShift && employeeShiftTime > NOON) return true;\n      if (!isMorningShift && employeeShiftTime > NOON) return false;\n    }\n\n    return false;\n  };\n\n  const calculateNumHours = (employee, shift) => {\n    let totalHours = employee.numHours;\n    let startTime = convertTimeToNumber(shift.startDate.split(' ')[4]);\n    let endTime = convertTimeToNumber(shift.endDate.split(' ')[4]);\n    let shiftHours = endTime - startTime;\n    totalHours = totalHours + shiftHours;\n    console.log(employee.firstName + employee.lastName + \" total hours: \" + totalHours);\n  };\n\n  const checkIfTrained = (employee, shift) => {\n    const position = shift.title;\n    let isTrained = false;\n    employee.positions.forEach(pos => {\n      if (position.trim() === pos.trim()) {\n        isTrained = true;\n      }\n    });\n    return isTrained;\n  };\n\n  const convertTimeToNumber = time => {\n    var hoursMinutes = time.split(/[.:]/);\n    var hours = parseInt(hoursMinutes[0], 10);\n    var minutes = hoursMinutes[1] ? parseInt(hoursMinutes[1], 10) : 0;\n    return hours + minutes / 60;\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    let randomShiftsArray = randomizeShifts(shifts);\n    let scheduledEmployees = createSchedule(randomShiftsArray); // console.log( randomShiftsArray )\n    //setScheduleStack([...scheduleStack, scheduledEmployees] )\n    // console.log( scheduleStack )\n    //saveEmployees( scheduledEmployees )\n    //setPage(1) \n  };\n\n  const saveEmployees = scheduledEmployees => {\n    scheduledEmployees.forEach(employee => {\n      console.log(employee);\n      dispatch(editEmployee(employee._id, employee));\n    });\n  };\n\n  const eraseSchedules = employees => {\n    let blankEmployees = [];\n    employees.forEach(employee => {\n      let tempEmployee = { ...employee,\n        weekSchedule: [],\n        numHours: 0\n      };\n      blankEmployees.push(tempEmployee);\n    });\n    return blankEmployees;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    direction: \"column\",\n    justify: \"center\",\n    alignItems: \"center\",\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      style: {\n        color: theme.palette.primary.main,\n        backgroundColor: theme.palette.background.paper,\n        width: 250,\n        height: 50,\n        marginTop: 45,\n        marginBottom: 20\n      },\n      variant: \"contained\",\n      onClick: handleSubmit,\n      children: \"Generate Schedule\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GenerateScheduleButton, \"x11EswSBhmOdvfSgt30v5mLD3JU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = GenerateScheduleButton;\nexport default GenerateScheduleButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"GenerateScheduleButton\");","map":{"version":3,"sources":["/Users/tyler/Documents/Programming/ReactApps/scheduler-app-database/client/src/components/homePage/generateScheduleButton/GenerateScheduleButton.js"],"names":["Button","Typography","Grid","useState","useEffect","useDispatch","useSelector","editEmployee","getEmployees","weekShifts","theme","GenerateScheduleButton","setPage","shifts","dispatch","employees","state","ignoreDesiredHours","employee","setEmployee","schedule","setSchedule","scheduleStack","setScheduleStack","currentId","setCurrentId","NOON","randomizeShifts","array","shuffledArray","shift","i","length","j","Math","floor","random","x","y","push","createSchedule","scheduledEmployees","blankEmployees","eraseSchedules","currentEmployee","currentEmployeeId","_id","splice","isEmployeeAvailable","canEmployeeTakeShift","weekSchedule","calculateNumHours","some","console","log","date","Date","startDate","dayOfWeek","getDay","shiftStartTime","convertTimeToNumber","split","day","availabilityDay","isAvailableMorning","availability","morning","isAvailableEvening","evening","isMorningShift","isAlreadyWorking","checkIfWorking","isTrained","checkIfTrained","numShiftsInDay","forEach","includes","employeeShift","find","employeeShiftTime","totalHours","numHours","startTime","endTime","endDate","shiftHours","firstName","lastName","position","title","positions","pos","trim","time","hoursMinutes","hours","parseInt","minutes","handleSubmit","e","preventDefault","randomShiftsArray","saveEmployees","tempEmployee","color","palette","primary","main","backgroundColor","background","paper","width","height","marginTop","marginBottom"],"mappings":"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","sourcesContent":["import { Button, Typography, Grid } from \"@material-ui/core\"\nimport { useState, useEffect } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { editEmployee, getEmployees } from '../../../actions/employees'\nimport weekShifts from '../../../testData/weekShifts'\nimport theme from '../../../themes/mintTheme'\n\n\nconst GenerateScheduleButton = ({setPage}) => {\n    let shifts = weekShifts\n    const dispatch = useDispatch()\n    const employees = useSelector((state) => state.employees)\n    const ignoreDesiredHours = false\n    const [employee, setEmployee] = useState(null)\n    const [schedule, setSchedule] = useState(null)\n    const [scheduleStack, setScheduleStack] = useState([])\n    const [currentId, setCurrentId] = useState(null)\n    const NOON = 12\n\n\n    const randomizeShifts = (array) => {\n        let shuffledArray = []\n\n        let shift = null\n\n        for (let i = array.length - 1; i >= 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n            shift = array[i]\n\n            for (let x = shift.length - 1; x >= 0; x--) {\n                const y = Math.floor(Math.random() * (x + 1));\n                [array[i][x], array[i][y]] = [array[i][y], array[i][x]];\n                shift = array[i][x]\n                shuffledArray.push(shift)\n            }\n        }\n        return shuffledArray\n    }\n\n\n    const createSchedule = (shifts) => {\n        let scheduledEmployees = []\n\n        let blankEmployees = eraseSchedules(employees)\n\n        while(shifts.length > 0) {\n            let currentEmployee = blankEmployees[Math.floor(Math.random() * (blankEmployees.length))]\n            let currentEmployeeId = currentEmployee._id\n            let shift = shifts.splice((Math.floor(Math.random() * (shifts.length))), 1).[0]\n            \n            const isEmployeeAvailable = canEmployeeTakeShift(currentEmployee, shift)\n            \n            if(isEmployeeAvailable) {\n                currentEmployee.weekSchedule.push(shift)\n                calculateNumHours(currentEmployee, shift)\n\n                if(!scheduledEmployees.some((employee) => employee._id === currentEmployeeId)){\n                    scheduledEmployees.push(currentEmployee)\n                }\n\n            }\n\n        }\n        console.log(scheduledEmployees)\n        return scheduledEmployees\n        \n    }\n\n\n    const canEmployeeTakeShift = (employee, shift) => {\n        const date = new Date(shift.startDate)\n        const dayOfWeek = date.getDay()\n        const shiftStartTime = convertTimeToNumber(shift.startDate.split(' ').[4])\n        const day = shift.startDate.split(' ').[0]\n        const availabilityDay = dayOfWeek === 0 ? 6 : dayOfWeek - 1\n        const isAvailableMorning = employee.availability[availabilityDay].morning\n        const isAvailableEvening = employee.availability[availabilityDay].evening\n        const isMorningShift = shiftStartTime < NOON ? true : false\n        const isAlreadyWorking = checkIfWorking(employee, day, isMorningShift)\n        const isTrained = checkIfTrained(employee, shift)\n        // calculateNumHours(employee)\n\n        return isAlreadyWorking ? false\n            : !isTrained ? false\n\n            : isMorningShift && isAvailableMorning ? true\n            : !isMorningShift && isAvailableEvening ? true\n            : false\n\n    }\n\n\n    const checkIfWorking = (employee, day, isMorningShift) => {\n        let numShiftsInDay = 0\n        employee.weekSchedule.forEach((shift) => {\n            if( shift.startDate.includes(day) ) {\n                numShiftsInDay++\n            }\n        })\n        if( numShiftsInDay > 1 ) return true\n        \n        const employeeShift = employee.weekSchedule.find( shift => shift.startDate.includes(day) )\n\n        if ( employeeShift ) {\n            const employeeShiftTime = convertTimeToNumber( employeeShift.startDate.split(' ').[4] )\n\n            if(isMorningShift && employeeShiftTime < NOON) return true\n            if(isMorningShift && employeeShiftTime > NOON) return false\n            if(!isMorningShift && employeeShiftTime > NOON) return true\n            if(!isMorningShift && employeeShiftTime > NOON) return false\n        }\n\n        return false\n        \n    }\n\n\n    const calculateNumHours = (employee, shift) => {\n        let totalHours = employee.numHours\n        let startTime = convertTimeToNumber(shift.startDate.split(' ').[4])\n        let endTime = convertTimeToNumber(shift.endDate.split(' ').[4])\n        let shiftHours = endTime - startTime\n        totalHours = totalHours + shiftHours\n        console.log(employee.firstName + employee.lastName + \" total hours: \" + totalHours)\n\n    }\n\n\n    const checkIfTrained = (employee, shift) => {\n        const position = shift.title\n        let isTrained = false\n\n        employee.positions.forEach((pos) => {\n            if(position.trim()===pos.trim()) {\n                isTrained = true\n            }\n        })\n        return isTrained\n    }\n\n\n    const convertTimeToNumber = (time) => {\n        var hoursMinutes = time.split(/[.:]/);\n        var hours = parseInt(hoursMinutes[0], 10);\n        var minutes = hoursMinutes[1] ? parseInt(hoursMinutes[1], 10) : 0;\n        return hours + minutes / 60;\n    }\n\n    \n    const handleSubmit = (e) => {\n        e.preventDefault()\n        let randomShiftsArray = randomizeShifts(shifts)\n        let scheduledEmployees = createSchedule(randomShiftsArray)\n        // console.log( randomShiftsArray )\n        //setScheduleStack([...scheduleStack, scheduledEmployees] )\n        // console.log( scheduleStack )\n        //saveEmployees( scheduledEmployees )\n        //setPage(1) \n    }\n\n\n    const saveEmployees = ( scheduledEmployees ) => {\n        scheduledEmployees.forEach(( employee ) => {\n            console.log(employee)\n            dispatch( editEmployee( employee._id, employee ))\n        })\n    }\n\n\n    const eraseSchedules = (employees) => {\n        let blankEmployees = []\n        employees.forEach((employee) => {\n            let tempEmployee = {...employee, weekSchedule:[], numHours: 0}\n            blankEmployees.push(tempEmployee)\n        })\n        return blankEmployees\n    }\n\n    \n    return (\n        <Grid container direction='column' justify='center' alignItems='center'>\n            <Button style={{ color:theme.palette.primary.main, backgroundColor:theme.palette.background.paper, width: 250, height: 50, marginTop:45, marginBottom:20}} variant='contained' onClick={ handleSubmit }>\n                Generate Schedule\n            </Button>\n        </Grid>\n    )\n}\n\nexport default GenerateScheduleButton\n"]},"metadata":{},"sourceType":"module"}