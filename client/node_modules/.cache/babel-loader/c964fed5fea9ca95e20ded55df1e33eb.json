{"ast":null,"code":"var _jsxFileName = \"/Users/tyler/Documents/Programming/ReactApps/scheduler-app-database/client/src/components/generateScheduleButton/GenerateScheduleButton.js\",\n    _s = $RefreshSig$();\n\nimport { Button, Typography, Grid } from \"@material-ui/core\";\nimport { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { editEmployee, getEmployees } from '../../actions/employees';\nimport weekShifts from '../../testData/weekShifts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GenerateScheduleButton = () => {\n  _s();\n\n  let shifts = weekShifts;\n  const dispatch = useDispatch();\n  const employees = useSelector(state => state.employees);\n  const ignoreDesiredHours = false;\n  const [employee, setEmployee] = useState(null);\n  const [schedule, setSchedule] = useState(null);\n  const [currentId, setCurrentId] = useState(null);\n  const midDay = 12; // useEffect(() => {\n  //     console.log(employee)\n  //dispatch(editEmployee(employee._id, employee))\n  // }, [employee])\n\n  const randomizeShifts = array => {\n    let shuffledArray = [];\n    let shift = null;\n\n    for (let i = array.length - 1; i >= 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n      shift = array[i];\n\n      for (let x = shift.length - 1; x >= 0; x--) {\n        const y = Math.floor(Math.random() * (x + 1));\n        [array[i][x], array[i][y]] = [array[i][y], array[i][x]];\n        shift = array[i][x];\n        shuffledArray.push(shift);\n      }\n    }\n\n    return shuffledArray;\n  };\n\n  const createSchedule = shifts => {\n    const scheduledEmployees = [];\n\n    while (shifts.length > 0) {\n      console.log('START');\n      let currentEmployee = employees[Math.floor(Math.random() * employees.length)];\n      let currentEmployeeId = currentEmployee._id;\n      const shift = shifts[0];\n      console.log(currentEmployee);\n      console.log(shift);\n      console.log('canEmployeeTakeShift() ' + canEmployeeTakeShift(currentEmployee, shift));\n      const isEmployeeAvailable = canEmployeeTakeShift(currentEmployee, shift);\n\n      if (isEmployeeAvailable) {\n        currentEmployee.weekSchedule.push(shift);\n        console.log('*shift added*');\n\n        if (!scheduledEmployees.some(employee => employee._id === currentEmployeeId)) {\n          scheduledEmployees.push(currentEmployee);\n        }\n      }\n\n      shifts.splice(shift, 1);\n    }\n\n    console.log(scheduledEmployees);\n  };\n\n  const canEmployeeTakeShift = (employee, shift) => {\n    console.log(' - inside canEmployeeTakeShift()'); //let isAbleToWork = false\n\n    const date = new Date(shift.startDate);\n    const dayOfWeek = date.getDay();\n    const shiftStartTime = convertTimeToNumber(shift.startDate.split(' ')[4]);\n    const day = shift.startDate.split(' ')[0];\n    const availabilityDay = dayOfWeek === 0 ? 6 : dayOfWeek - 1;\n    console.log('availabilityDay : ' + availabilityDay);\n    console.log('dayOfWeek : ' + dayOfWeek);\n    console.log('day : ' + day);\n    const isAvailableMorning = employee.availability[availabilityDay].morning;\n    console.log('isAvailableMorning() : ' + isAvailableMorning);\n    const isAvailableEvening = employee.availability[availabilityDay].evening;\n    console.log('isAvailableEvening() : ' + isAvailableEvening);\n    const isMorningShift = shiftStartTime < midDay ? true : false;\n    const isAlreadyWorking = checkIfWorking(employee, day, isMorningShift);\n    console.log('isAlreadyWorking : ' + isAlreadyWorking);\n    console.log('isMorningShift: ' + isMorningShift);\n    return isAlreadyWorking ? false : isMorningShift && isAvailableMorning ? true : !isMorningShift && isAvailableEvening ? true : false;\n  };\n\n  const checkIfWorking = (employee, day, isMorningShift) => {\n    let shiftTime = 0;\n    let isWorking = false;\n    console.log(day);\n    const scheduledShift = employee.weekSchedule.find(shift => shift.startDate.includes(day));\n    console.log('scheduledShift : ' + scheduledShift);\n\n    if (scheduledShift) {\n      // employee.weekSchedule.forEach((scheduledShift) => {\n      shiftTime = convertTimeToNumber(scheduledShift.startDate.split(' ')[4]);\n\n      if (!scheduledShift.startDate.includes(day)) {\n        isWorking = false;\n      }\n\n      if (scheduledShift.startDate.includes(day) && isMorningShift) {\n        isWorking = shiftTime < midDay ? true : false;\n      }\n\n      if (scheduledShift.startDate.includes(day) && !isMorningShift) {\n        isWorking = shiftTime > midDay ? true : false;\n      } // })\n\n    }\n\n    return isWorking;\n  };\n\n  const convertTimeToNumber = time => {\n    var hoursMinutes = time.split(/[.:]/);\n    var hours = parseInt(hoursMinutes[0], 10);\n    var minutes = hoursMinutes[1] ? parseInt(hoursMinutes[1], 10) : 0;\n    return hours + minutes / 60;\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const randomShiftsArray = randomizeShifts(shifts);\n    createSchedule(randomShiftsArray); // dispatch(editEmployee(currentId, employee))\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    direction: \"column\",\n    justify: \"center\",\n    alignItems: \"center\",\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      color: \"secondary\",\n      style: {\n        width: 300,\n        height: 50,\n        margin: 50\n      },\n      variant: \"contained\",\n      onClick: handleSubmit,\n      children: \"Generate Schedule\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GenerateScheduleButton, \"5kIpb/EwrUSXGVr2wuTI7ukpcqg=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = GenerateScheduleButton;\nexport default GenerateScheduleButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"GenerateScheduleButton\");","map":{"version":3,"sources":["/Users/tyler/Documents/Programming/ReactApps/scheduler-app-database/client/src/components/generateScheduleButton/GenerateScheduleButton.js"],"names":["Button","Typography","Grid","useState","useEffect","useDispatch","useSelector","editEmployee","getEmployees","weekShifts","GenerateScheduleButton","shifts","dispatch","employees","state","ignoreDesiredHours","employee","setEmployee","schedule","setSchedule","currentId","setCurrentId","midDay","randomizeShifts","array","shuffledArray","shift","i","length","j","Math","floor","random","x","y","push","createSchedule","scheduledEmployees","console","log","currentEmployee","currentEmployeeId","_id","canEmployeeTakeShift","isEmployeeAvailable","weekSchedule","some","splice","date","Date","startDate","dayOfWeek","getDay","shiftStartTime","convertTimeToNumber","split","day","availabilityDay","isAvailableMorning","availability","morning","isAvailableEvening","evening","isMorningShift","isAlreadyWorking","checkIfWorking","shiftTime","isWorking","scheduledShift","find","includes","time","hoursMinutes","hours","parseInt","minutes","handleSubmit","e","preventDefault","randomShiftsArray","width","height","margin"],"mappings":"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","sourcesContent":["import { Button, Typography, Grid } from \"@material-ui/core\"\nimport { useState, useEffect } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { editEmployee, getEmployees } from '../../actions/employees'\nimport weekShifts from '../../testData/weekShifts'\n\n\nconst GenerateScheduleButton = () => {\n    let shifts = weekShifts\n    const dispatch = useDispatch()\n    const employees = useSelector((state) => state.employees)\n    const ignoreDesiredHours = false\n    const [employee, setEmployee] = useState(null)\n    const [schedule, setSchedule] = useState(null)\n    const [currentId, setCurrentId] = useState(null)\n    const midDay = 12\n\n\n    // useEffect(() => {\n    //     console.log(employee)\n        //dispatch(editEmployee(employee._id, employee))\n    // }, [employee])\n    \n\n    const randomizeShifts = (array) => {\n        let shuffledArray = []\n\n        let shift = null\n\n        for (let i = array.length - 1; i >= 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n            shift = array[i]\n\n            for (let x = shift.length - 1; x >= 0; x--) {\n                const y = Math.floor(Math.random() * (x + 1));\n                [array[i][x], array[i][y]] = [array[i][y], array[i][x]];\n                shift = array[i][x]\n                shuffledArray.push(shift)\n            }\n        }\n        return shuffledArray\n    }\n\n\n    const createSchedule = (shifts) => {\n        const scheduledEmployees = []\n\n        while(shifts.length > 0) {\n            console.log('START')\n            let currentEmployee = employees[Math.floor(Math.random() * (employees.length))]\n            let currentEmployeeId = currentEmployee._id\n            const shift = shifts[0]\n            console.log(currentEmployee)\n            console.log(shift)\n            \n            console.log('canEmployeeTakeShift() ' + canEmployeeTakeShift(currentEmployee, shift))\n            const isEmployeeAvailable = canEmployeeTakeShift(currentEmployee, shift)\n\n            if(isEmployeeAvailable) {\n                currentEmployee.weekSchedule.push(shift)\n                console.log('*shift added*')\n\n                if(!scheduledEmployees.some((employee) => employee._id === currentEmployeeId)){\n                    scheduledEmployees.push(currentEmployee)\n                }\n\n            }\n            shifts.splice(shift, 1)\n\n        }\n        console.log(scheduledEmployees)\n        \n    }\n\n\n    const canEmployeeTakeShift = (employee, shift) => {\n        console.log(' - inside canEmployeeTakeShift()')\n        //let isAbleToWork = false\n        \n        const date = new Date(shift.startDate)\n        const dayOfWeek = date.getDay()\n        const shiftStartTime = convertTimeToNumber(shift.startDate.split(' ').[4])\n        const day = shift.startDate.split(' ').[0]\n        const availabilityDay = dayOfWeek === 0 ? 6 : dayOfWeek - 1\n        console.log('availabilityDay : ' + availabilityDay)\n        console.log('dayOfWeek : ' + dayOfWeek)\n        console.log('day : ' + day)\n        const isAvailableMorning = employee.availability[availabilityDay].morning\n        console.log('isAvailableMorning() : ' + isAvailableMorning)\n        const isAvailableEvening = employee.availability[availabilityDay].evening\n        console.log('isAvailableEvening() : ' + isAvailableEvening)\n        const isMorningShift = shiftStartTime < midDay ? true : false\n        const isAlreadyWorking = checkIfWorking(employee, day, isMorningShift)\n        console.log('isAlreadyWorking : ' + isAlreadyWorking)\n\n        console.log('isMorningShift: ' + isMorningShift)\n        return isAlreadyWorking ? false\n            : isMorningShift && isAvailableMorning ? true\n            : !isMorningShift && isAvailableEvening ? true\n            : false\n    }\n\n\n    const checkIfWorking = (employee, day, isMorningShift) => {\n        let shiftTime = 0\n        let isWorking = false\n        console.log(day)\n\n        \n        const scheduledShift = employee.weekSchedule.find(shift => shift.startDate.includes(day))\n        console.log('scheduledShift : ' + scheduledShift)\n        if(scheduledShift) {\n        // employee.weekSchedule.forEach((scheduledShift) => {\n            shiftTime = convertTimeToNumber(scheduledShift.startDate.split(' ').[4])\n            if(!scheduledShift.startDate.includes(day)) { \n                isWorking = false\n            }\n            \n            if(scheduledShift.startDate.includes(day) && isMorningShift) {\n                isWorking = (shiftTime < midDay) ? true : false\n            }\n            \n            if(scheduledShift.startDate.includes(day) && !isMorningShift) {\n                isWorking = (shiftTime > midDay) ? true : false\n            }\n            \n        // })\n        }\n        \n        return isWorking\n    }\n\n\n    const convertTimeToNumber = (time) => {\n        var hoursMinutes = time.split(/[.:]/);\n        var hours = parseInt(hoursMinutes[0], 10);\n        var minutes = hoursMinutes[1] ? parseInt(hoursMinutes[1], 10) : 0;\n        return hours + minutes / 60;\n    }\n\n    \n    const handleSubmit = (e) => {\n        e.preventDefault()\n        const randomShiftsArray = randomizeShifts(shifts)\n        createSchedule(randomShiftsArray)\n        // dispatch(editEmployee(currentId, employee))\n    }\n\n    \n    return (\n        <Grid container direction='column' justify='center' alignItems='center'>\n            <Button color='secondary' style={{width: 300, height: 50, margin:50}} variant='contained' onClick={handleSubmit}>\n                Generate Schedule\n            </Button>\n        </Grid>\n    )\n}\n\nexport default GenerateScheduleButton\n"]},"metadata":{},"sourceType":"module"}