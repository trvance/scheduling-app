{"ast":null,"code":"var _jsxFileName = \"/Users/tyler/Documents/Programming/ReactApps/scheduler-app-database/client/src/components/employeesPage/employeeForm/EmployeeForm.js\",\n    _s = $RefreshSig$();\n\nimport { Card, Typography, TextField, Button, MenuItem, Paper, Grid, List, ListItem, ListItemIcon, Checkbox, ListItemText } from \"@material-ui/core\";\nimport { useState, useEffect } from 'react';\nimport useStyles from './styles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addEmployee, editEmployee } from '../../../actions/employees';\nimport { formatPhoneNumber } from '../../../formatAndValidations/formatPhoneNumber';\nimport { isEmailValid } from '../../../formatAndValidations/validateEmail';\nimport { HOTLINE, COLDLINE, MAINTENANCE, FLOATER, BACKUPCASH, CASHIER, MEATPREP, VEGGIE } from '../../../constants/positions';\nimport AvailabilityComponent from './availabilityComponent/AvailabilityComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst positions = [MAINTENANCE, HOTLINE, COLDLINE, FLOATER, BACKUPCASH, CASHIER, MEATPREP, VEGGIE];\nconst hours = ['0-5', '5-10', '10-15', '15-20', '20-25', '25-30', '30-35', '35-40', '40-45', '45+'];\n\nconst EmployeeForm = ({\n  currentId,\n  setCurrentId,\n  unmountEmployeeForm\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const selectedEmployee = useSelector(state => currentId ? state.employees.find(emp => emp._id === currentId) : null);\n  useEffect(() => {\n    if (!firstNameError && !lastNameError && !phoneNumberError && !emailError) {\n      if (currentId) {\n        dispatch(editEmployee(currentId, employee));\n      } else {\n        dispatch(addEmployee(employee));\n      }\n\n      clear();\n      unmountEmployeeForm();\n    }\n  });\n  const [employee, setEmployee] = useState({\n    firstName: '',\n    middleInitial: '',\n    lastName: '',\n    phoneNumber: '',\n    email: '',\n    positions: [MAINTENANCE],\n    desiredHours: '25-30',\n    availability: [{\n      day: 'Monday',\n      morning: false,\n      evening: false\n    }, {\n      day: 'Tuesday',\n      morning: false,\n      evening: false\n    }, {\n      day: 'Wednesday',\n      morning: false,\n      evening: false\n    }, {\n      day: 'Thursday',\n      morning: false,\n      evening: false\n    }, {\n      day: 'Friday',\n      morning: false,\n      evening: false\n    }, {\n      day: 'Saturday',\n      morning: false,\n      evening: false\n    }, {\n      day: 'Sunday',\n      morning: false,\n      evening: false\n    }]\n  });\n  const [firstNameError, setFirstNameError] = useState(null);\n  const [firstNameHelperText, setFirstNameHelperText] = useState('');\n  const [lastNameError, setLastNameError] = useState(null);\n  const [lastNameHelperText, setLastNameHelperText] = useState('');\n  const [emailError, setEmailError] = useState(null);\n  const [emailHelperText, setEmailHelperText] = useState('');\n  const [phoneNumberError, setPhoneNumberError] = useState(null);\n  const [phoneNumberHelperText, setPhoneNumberHelperText] = useState('');\n  useEffect(() => {\n    if (selectedEmployee) setEmployee(selectedEmployee);\n  }, [selectedEmployee]);\n\n  const handleFocus = e => {\n    const fieldName = e.target.name;\n\n    switch (fieldName) {\n      case 'firstName':\n        {\n          setFirstNameError(null);\n          setFirstNameHelperText('');\n          break;\n        }\n\n      case 'lastName':\n        {\n          setLastNameError(null);\n          setLastNameHelperText('');\n          break;\n        }\n\n      case 'email':\n        {\n          setEmailError(null);\n          setEmailHelperText('');\n          break;\n        }\n\n      case 'phoneNumber':\n        {\n          setPhoneNumberError(null);\n          setPhoneNumberHelperText('');\n          break;\n        }\n    }\n  };\n\n  const handleFirstName = () => {\n    if (employee.firstName == '') {\n      setFirstNameError(true);\n      setFirstNameHelperText('Gotta have a first name!');\n    } else {\n      setFirstNameError(false);\n      setFirstNameHelperText('');\n    }\n  };\n\n  const handleLastName = () => {\n    if (employee.lastName == '') {\n      setLastNameError(true);\n      setLastNameHelperText('Gotta have a last name!');\n    } else {\n      setLastNameError(false);\n      setLastNameHelperText('');\n    }\n  };\n\n  const getAvailability = componentAvailability => {\n    setEmployee({ ...employee,\n      availability: componentAvailability\n    });\n  };\n\n  const handlePhoneNumber = () => {\n    if (employee.phoneNumber.length < 14) {\n      setPhoneNumberError(true);\n      setPhoneNumberHelperText('Phone number is too short!');\n    } else {\n      setPhoneNumberError(false);\n      setPhoneNumberHelperText('');\n    }\n  };\n\n  const handleEmail = () => {\n    if (!isEmailValid(employee.email)) {\n      setEmailError(true);\n      setEmailHelperText(\"That isn't a valid email!\");\n    } else {\n      setEmailError(false);\n      setEmailHelperText('');\n    }\n  };\n\n  const handlePositions = option => () => {\n    const newPositions = employee.positions;\n\n    if (!newPositions.includes(option)) {\n      newPositions.push(option);\n    } else {\n      const currentPosition = employee.positions.indexOf(option);\n      newPositions.splice(currentPosition, 1);\n    }\n\n    setEmployee({ ...employee,\n      positions: newPositions\n    });\n    console.log({\n      employee\n    });\n  };\n\n  const validateInfo = () => {\n    handleFirstName();\n    handleLastName();\n    handlePhoneNumber();\n    handleEmail();\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(employee);\n    setTimeout(function () {\n      validateInfo();\n    }, 300); // if(!firstNameError && !lastNameError && !phoneNumberError && !emailError){\n    //     if(currentId) {\n    //         dispatch(editEmployee(currentId, employee))\n    //     }\n    //     else {\n    //         dispatch(addEmployee(employee))\n    //     }\n    //     clear()\n    //     unmountEmployeeForm()\n    // }\n  };\n\n  const clear = () => {\n    setEmployee({\n      firstName: '',\n      middleInitial: '',\n      lastName: '',\n      phoneNumber: '',\n      email: '',\n      positions: [MAINTENANCE],\n      desiredHours: '25-30',\n      availability: [{\n        day: 'Monday',\n        morning: false,\n        evening: false\n      }, {\n        day: 'Tuesday',\n        morning: false,\n        evening: false\n      }, {\n        day: 'Wednesday',\n        morning: false,\n        evening: false\n      }, {\n        day: 'Thursday',\n        morning: false,\n        evening: false\n      }, {\n        day: 'Friday',\n        morning: false,\n        evening: false\n      }, {\n        day: 'Saturday',\n        morning: false,\n        evening: false\n      }, {\n        day: 'Sunday',\n        morning: false,\n        evening: false\n      }]\n    });\n    setFirstNameError(null);\n    setFirstNameHelperText('');\n    setLastNameError(null);\n    setLastNameHelperText('');\n    setEmailError(null);\n    setEmailHelperText('');\n    setPhoneNumberError(null);\n    setPhoneNumberHelperText('');\n    setCurrentId(null);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.card,\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      className: classes.title,\n      variant: \"h4\",\n      children: [currentId ? `Edit ` : `Add New `, \"Employee\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"center\",\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: `${classes.root} ${classes.form}`,\n        autoComplete: \"off\",\n        noValidate: true,\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          direction: \"column\",\n          justifty: \"center\",\n          item: true,\n          md: 6,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Paper, {\n            className: classes.paper,\n            elevation: 8,\n            style: {\n              paddingBottom: 30\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h5\",\n              gutterBottom: true,\n              children: \"Information\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              name: \"firstName\",\n              required: true,\n              error: firstNameError,\n              variant: \"outlined\",\n              label: \"First Name\",\n              value: employee.firstName,\n              helperText: firstNameHelperText,\n              onChange: e => setEmployee({ ...employee,\n                firstName: e.target.value.trim()\n              }),\n              onFocus: e => handleFocus(e)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              name: \"middleInitial\",\n              variant: \"outlined\",\n              label: \"Middle Initial\",\n              value: employee.middleInitial,\n              onChange: e => setEmployee({ ...employee,\n                middleInitial: e.target.value.toUpperCase()\n              }),\n              inputProps: {\n                maxLength: 1\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              name: \"lastName\",\n              required: true,\n              error: lastNameError,\n              variant: \"outlined\",\n              label: \"Last Name\",\n              value: employee.lastName,\n              helperText: lastNameHelperText,\n              onChange: e => setEmployee({ ...employee,\n                lastName: e.target.value.trim()\n              }),\n              onFocus: e => handleFocus(e)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              name: \"phoneNumber\",\n              required: true,\n              error: phoneNumberError,\n              variant: \"outlined\",\n              label: \"Phone Number\",\n              value: employee.phoneNumber,\n              helperText: phoneNumberHelperText,\n              onChange: e => setEmployee({ ...employee,\n                phoneNumber: formatPhoneNumber(e.target.value)\n              }),\n              onFocus: e => handleFocus(e)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              name: \"email\",\n              required: true,\n              error: emailError,\n              variant: \"outlined\",\n              label: \"Email\",\n              value: employee.email,\n              helperText: emailHelperText,\n              onChange: e => setEmployee({ ...employee,\n                email: e.target.value\n              }),\n              onFocus: e => handleFocus(e)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              select: true,\n              name: \"hours\",\n              required: true,\n              variant: \"outlined\",\n              label: \"Desired Hours\",\n              value: employee.desiredHours,\n              onChange: e => setEmployee({ ...employee,\n                desiredHours: e.target.value\n              }),\n              children: hours.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: option,\n                children: [option, \" hours\"]\n              }, option, true, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          item: true,\n          direction: \"column\",\n          justify: \"center\",\n          alignContent: \"center\",\n          md: 6,\n          xs: 12,\n          children: [/*#__PURE__*/_jsxDEV(Paper, {\n            className: classes.paper,\n            elevation: 8,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h5\",\n              gutterBottom: true,\n              children: \"Positions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(List, {\n              children: positions.map((position, index) => /*#__PURE__*/_jsxDEV(ListItem, {\n                style: {\n                  height: 30\n                },\n                role: undefined,\n                value: position,\n                button: true,\n                onClick: handlePositions(position),\n                children: /*#__PURE__*/_jsxDEV(ListItemIcon, {\n                  children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n                    size: \"small\",\n                    edge: \"start\",\n                    checked: employee.positions.indexOf(position) !== -1,\n                    tabIndex: -1,\n                    style: {\n                      background: \"transparent\"\n                    },\n                    disableRipple: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 307,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                    style: {\n                      marginTop: 7\n                    },\n                    id: index,\n                    primary: position\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 315,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 306,\n                  columnNumber: 37\n                }, this)\n              }, position, false, {\n                fileName: _jsxFileName,\n                lineNumber: 305,\n                columnNumber: 33\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(Paper, {\n              className: classes.paper,\n              elevation: 8,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h5\",\n                gutterBottom: true,\n                children: \"Availability\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 325,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(AvailabilityComponent, {\n                getAvailability: getAvailability\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 326,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: classes.submitButton,\n          variant: \"contained\",\n          color: \"primary\",\n          size: \"large\",\n          type: \"submit\",\n          fullWidth: true,\n          children: currentId ? 'Update' : 'Submit'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: classes.clearButton,\n          variant: \"contained\",\n          color: \"secondary\",\n          size: \"small\",\n          onClick: clear,\n          fullWidth: true,\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 273,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EmployeeForm, \"DFRklk3ug4ixskmTC6lx+8BPmZQ=\", false, function () {\n  return [useStyles, useDispatch, useSelector];\n});\n\n_c = EmployeeForm;\nexport default EmployeeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmployeeForm\");","map":{"version":3,"sources":["/Users/tyler/Documents/Programming/ReactApps/scheduler-app-database/client/src/components/employeesPage/employeeForm/EmployeeForm.js"],"names":["Card","Typography","TextField","Button","MenuItem","Paper","Grid","List","ListItem","ListItemIcon","Checkbox","ListItemText","useState","useEffect","useStyles","useDispatch","useSelector","addEmployee","editEmployee","formatPhoneNumber","isEmailValid","HOTLINE","COLDLINE","MAINTENANCE","FLOATER","BACKUPCASH","CASHIER","MEATPREP","VEGGIE","AvailabilityComponent","positions","hours","EmployeeForm","currentId","setCurrentId","unmountEmployeeForm","classes","dispatch","selectedEmployee","state","employees","find","emp","_id","firstNameError","lastNameError","phoneNumberError","emailError","employee","clear","setEmployee","firstName","middleInitial","lastName","phoneNumber","email","desiredHours","availability","day","morning","evening","setFirstNameError","firstNameHelperText","setFirstNameHelperText","setLastNameError","lastNameHelperText","setLastNameHelperText","setEmailError","emailHelperText","setEmailHelperText","setPhoneNumberError","phoneNumberHelperText","setPhoneNumberHelperText","handleFocus","e","fieldName","target","name","handleFirstName","handleLastName","getAvailability","componentAvailability","handlePhoneNumber","length","handleEmail","handlePositions","option","newPositions","includes","push","currentPosition","indexOf","splice","console","log","validateInfo","handleSubmit","preventDefault","setTimeout","card","title","root","form","paper","paddingBottom","value","trim","toUpperCase","maxLength","map","position","index","height","undefined","background","marginTop","submitButton","clearButton"],"mappings":"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","sourcesContent":["import { Card, Typography, TextField, Button, MenuItem, Paper, Grid, List, ListItem, ListItemIcon, Checkbox, ListItemText } from \"@material-ui/core\"\nimport { useState, useEffect } from 'react'\nimport useStyles from './styles'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { addEmployee, editEmployee } from '../../../actions/employees'\nimport {formatPhoneNumber} from '../../../formatAndValidations/formatPhoneNumber'\nimport {isEmailValid} from '../../../formatAndValidations/validateEmail'\nimport { HOTLINE, COLDLINE, MAINTENANCE, FLOATER, BACKUPCASH, CASHIER, MEATPREP, VEGGIE } from '../../../constants/positions'\nimport AvailabilityComponent from './availabilityComponent/AvailabilityComponent'\n\nconst positions = [ MAINTENANCE, HOTLINE, COLDLINE, FLOATER, BACKUPCASH, CASHIER, MEATPREP, VEGGIE]\nconst hours = [ '0-5', '5-10', '10-15', '15-20', '20-25', '25-30', '30-35', '35-40', '40-45', '45+']\n\n\nconst EmployeeForm = ({ currentId, setCurrentId, unmountEmployeeForm }) => {\n    const classes = useStyles()\n    const dispatch = useDispatch()\n    const selectedEmployee = useSelector((state) => currentId ? state.employees.find((emp) => emp._id === currentId) : null)\n    useEffect(() => {\n        if(!firstNameError && !lastNameError && !phoneNumberError && !emailError){\n            if(currentId) {\n                dispatch(editEmployee(currentId, employee))\n            }\n            else {\n                dispatch(addEmployee(employee))\n            }\n            clear()\n            unmountEmployeeForm()\n        }\n    })\n    \n    const [employee, setEmployee] = useState({\n        firstName: '',\n        middleInitial: '',\n        lastName: '',\n        phoneNumber: '',\n        email: '',\n        positions: [MAINTENANCE],\n        desiredHours: '25-30',\n        availability: [\n            {\n            day: 'Monday',\n            morning: false,\n            evening: false,\n            },\n            {\n            day: 'Tuesday',\n            morning: false,\n            evening: false,\n            },\n            {\n            day: 'Wednesday',\n            morning: false,\n            evening: false,\n            },\n            {\n            day: 'Thursday',\n            morning: false,\n            evening: false,\n            },\n            {\n            day: 'Friday',\n            morning: false,\n            evening: false,\n            },\n            {\n            day: 'Saturday',\n            morning: false,\n            evening: false,\n            },\n            {\n            day: 'Sunday',\n            morning: false,\n            evening: false,\n            },\n        ]\n    }) \n\n    const [firstNameError, setFirstNameError] = useState(null)\n    const [firstNameHelperText, setFirstNameHelperText] = useState('')\n    const [lastNameError, setLastNameError] = useState(null)\n    const [lastNameHelperText, setLastNameHelperText] = useState('')\n    const [emailError, setEmailError] = useState(null)\n    const [emailHelperText, setEmailHelperText] = useState('')\n    const [phoneNumberError, setPhoneNumberError] = useState(null)\n    const [phoneNumberHelperText, setPhoneNumberHelperText] = useState('')\n\n    useEffect(() => {\n        if(selectedEmployee)setEmployee(selectedEmployee)\n    }, [selectedEmployee])\n\n    const handleFocus = (e) => {\n        const fieldName = e.target.name\n        switch (fieldName){\n            case 'firstName':{\n                setFirstNameError(null)\n                setFirstNameHelperText('')\n                break\n            }\n            case 'lastName': {\n                setLastNameError(null)\n                setLastNameHelperText('')\n                break\n            }\n            case 'email': {\n                setEmailError(null)\n                setEmailHelperText('')\n                break\n            }\n            case 'phoneNumber': {\n                setPhoneNumberError(null)\n                setPhoneNumberHelperText('')\n                break\n            }\n        }\n    }\n    \n    const handleFirstName = () => {\n        if (employee.firstName == '') {\n            setFirstNameError(true)\n            setFirstNameHelperText('Gotta have a first name!')\n        }\n        else {\n            setFirstNameError(false)\n            setFirstNameHelperText('')\n        }\n    }\n\n    const handleLastName = () => {\n        if (employee.lastName == '') {\n            setLastNameError(true)\n            setLastNameHelperText('Gotta have a last name!')\n        }\n        else {\n            setLastNameError(false)\n            setLastNameHelperText('')\n        }\n    }\n\n    const getAvailability = (componentAvailability) => {\n        setEmployee({...employee, availability: componentAvailability})\n    }\n\n    const handlePhoneNumber = () => {\n        if (employee.phoneNumber.length < 14) {\n            setPhoneNumberError(true)\n            setPhoneNumberHelperText('Phone number is too short!')\n        }\n        else {\n            setPhoneNumberError(false)\n            setPhoneNumberHelperText('')\n        }\n    }\n\n    const handleEmail = () => {\n        if (!isEmailValid(employee.email)) {\n            setEmailError(true)\n            setEmailHelperText(\"That isn't a valid email!\")\n        }\n        else {\n            setEmailError(false)\n            setEmailHelperText('')\n        }\n    }\n\n    const handlePositions = (option) => () => {\n\n        const newPositions = employee.positions\n        \n        if (!newPositions.includes(option)) {\n            newPositions.push(option);\n        } else {\n            const currentPosition = employee.positions.indexOf(option)\n            newPositions.splice(currentPosition, 1);\n        }\n\n        \n        setEmployee({...employee, positions:newPositions})\n        console.log({employee})\n    }\n\n    const validateInfo = () => {\n        \n\n        handleFirstName()\n        handleLastName()\n        handlePhoneNumber()\n        handleEmail()\n\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        console.log(employee)\n\n        setTimeout(function(){\n            validateInfo()\n        },300)\n\n        // if(!firstNameError && !lastNameError && !phoneNumberError && !emailError){\n        //     if(currentId) {\n        //         dispatch(editEmployee(currentId, employee))\n        //     }\n        //     else {\n        //         dispatch(addEmployee(employee))\n        //     }\n        //     clear()\n        //     unmountEmployeeForm()\n        // }\n\n    }\n\n    const clear = () => {\n        setEmployee({\n            firstName: '',\n            middleInitial: '',\n            lastName: '',\n            phoneNumber: '',\n            email: '',\n            positions: [MAINTENANCE],\n            desiredHours: '25-30',\n            availability: [\n                {\n                day: 'Monday',\n                morning: false,\n                evening: false,\n                },\n                {\n                day: 'Tuesday',\n                morning: false,\n                evening: false,\n                },\n                {\n                day: 'Wednesday',\n                morning: false,\n                evening: false,\n                },\n                {\n                day: 'Thursday',\n                morning: false,\n                evening: false,\n                },\n                {\n                day: 'Friday',\n                morning: false,\n                evening: false,\n                },\n                {\n                day: 'Saturday',\n                morning: false,\n                evening: false,\n                },\n                {\n                day: 'Sunday',\n                morning: false,\n                evening: false,\n                },\n    \n            ]\n        })\n        setFirstNameError(null)\n        setFirstNameHelperText('')\n        setLastNameError(null)\n        setLastNameHelperText('')\n        setEmailError(null)\n        setEmailHelperText('')\n        setPhoneNumberError(null)\n        setPhoneNumberHelperText('')\n        setCurrentId(null)\n    }\n\n    return (\n        <Card className={classes.card} >\n            <Typography className={classes.title} variant=\"h4\">{currentId ? `Edit ` : `Add New `}Employee</Typography>\n            <Grid container direction=\"row\" justify=\"center\" xs={12}>\n                <form className={`${classes.root} ${classes.form}`} autoComplete=\"off\" noValidate onSubmit={ handleSubmit } >\n\n                    <Grid container direction=\"column\" justifty=\"center\" item md={6} xs={12}>\n                        <Paper className={classes.paper} elevation={8} style={{paddingBottom: 30}}>\n                            <Typography variant=\"h5\" gutterBottom>Information</Typography>\n\n                            <TextField name=\"firstName\" required error={firstNameError} variant=\"outlined\" label=\"First Name\" value={employee.firstName} helperText={firstNameHelperText} onChange={ (e) => setEmployee({ ...employee, firstName: e.target.value.trim() })}  onFocus={ (e) => handleFocus(e) } />\n                            <TextField name=\"middleInitial\" variant=\"outlined\" label=\"Middle Initial\" value={employee.middleInitial} onChange={ (e) => setEmployee({ ...employee, middleInitial: e.target.value.toUpperCase() })} inputProps={{ maxLength:1 }}/>\n                            <TextField name=\"lastName\" required error={lastNameError} variant=\"outlined\" label=\"Last Name\" value={employee.lastName} helperText={lastNameHelperText} onChange={ (e) => setEmployee({ ...employee, lastName: e.target.value.trim() })}  onFocus={ (e) => handleFocus(e) }/>\n                            <TextField name=\"phoneNumber\" required error={phoneNumberError} variant=\"outlined\" label=\"Phone Number\" value={employee.phoneNumber} helperText={phoneNumberHelperText} onChange={ (e) => setEmployee({...employee, phoneNumber: formatPhoneNumber(e.target.value) })}  onFocus={ (e) => handleFocus(e)} />\n                            <TextField name=\"email\" required error={emailError} variant=\"outlined\" label=\"Email\" value={employee.email} helperText={emailHelperText} onChange={ (e) => setEmployee({...employee, email: e.target.value})} onFocus={ (e) => handleFocus(e) } />\n                            <TextField select name=\"hours\" required variant=\"outlined\" label=\"Desired Hours\" value={employee.desiredHours} onChange={ (e) => setEmployee({...employee, desiredHours: e.target.value}) }>\n                                {hours.map((option) => (\n                                    <MenuItem key={option} value={option}>\n                                        {option} hours\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        </Paper>\n                    </Grid>\n\n\n                <Grid container item direction=\"column\" justify=\"center\" alignContent=\"center\" md={6} xs={12} >\n                    <Paper className={classes.paper} elevation={8}>\n                    \n                        <Typography variant=\"h5\" gutterBottom>Positions</Typography>\n\n                        <List >\n                            {positions.map((position, index) => (\n                                <ListItem key={position} style={{height: 30}} role={undefined} value={position} button onClick={handlePositions(position)}>\n                                    <ListItemIcon>\n                                        <Checkbox \n                                            size=\"small\"\n                                            edge=\"start\"\n                                            checked={employee.positions.indexOf(position) !== -1}\n                                            tabIndex={-1}\n                                            style={{background: \"transparent\"}}\n                                            disableRipple\n                                        />\n                                        <ListItemText style={{marginTop:7}} id={index} primary={position}/>\n                                    </ListItemIcon>\n                                </ListItem>\n                            ))}\n                        </List>\n                    </Paper>\n\n                    <Grid item >\n                        <Paper className={classes.paper} elevation={8}>\n\n                            <Typography variant=\"h5\" gutterBottom>Availability</Typography>\n                            <AvailabilityComponent getAvailability={getAvailability} />\n\n                        </Paper>\n                    </Grid>\n\n                </Grid>\n\n                <Button className={classes.submitButton} variant=\"contained\" color=\"primary\" size=\"large\"  type='submit' fullWidth>{currentId ? 'Update' : 'Submit'}</Button>\n                <Button className={classes.clearButton} variant=\"contained\" color=\"secondary\" size=\"small\" onClick={clear} fullWidth>Clear</Button>\n\n                </form>\n            </Grid>\n        </Card>\n    )\n}\n\nexport default EmployeeForm\n"]},"metadata":{},"sourceType":"module"}