{"ast":null,"code":"var _jsxFileName = \"/Users/tyler/Documents/Programming/ReactApps/scheduler-app-database/client/src/components/generateScheduleButton/GenerateScheduleButton.js\",\n    _s = $RefreshSig$();\n\nimport { Button, Typography, Grid } from \"@material-ui/core\";\nimport { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { editEmployee, getEmployees } from '../../actions/employees';\nimport weekShifts from '../../testData/weekShifts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GenerateScheduleButton = () => {\n  _s();\n\n  let shifts = weekShifts;\n  const dispatch = useDispatch();\n  const employees = useSelector(state => state.employees);\n  const ignoreDesiredHours = false;\n  const [employee, setEmployee] = useState(null);\n  const [schedule, setSchedule] = useState(null);\n  const [currentId, setCurrentId] = useState(null); // useEffect(() => {\n  //     console.log(employee)\n  //dispatch(editEmployee(employee._id, employee))\n  // }, [employee])\n\n  const randomizeShifts = array => {\n    let shuffledArray = [];\n    let shift = null;\n\n    for (let i = array.length - 1; i >= 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n      shift = array[i];\n\n      for (let x = shift.length - 1; x >= 0; x--) {\n        const y = Math.floor(Math.random() * (x + 1));\n        [array[i][x], array[i][y]] = [array[i][y], array[i][x]];\n        shift = array[i][x];\n        shuffledArray.push(shift);\n      }\n    }\n\n    return shuffledArray;\n  };\n\n  const createSchedule = shifts => {\n    const scheduledEmployees = [];\n\n    while (shifts.length > 0) {\n      let currentEmployee = employees[Math.floor(Math.random() * employees.length)];\n      let currentEmployeeId = currentEmployee._id;\n      const shift = shifts[0];\n\n      if (canEmployeeTakeShift(currentEmployee, shift)) {\n        currentEmployee.weekSchedule.push(shift);\n\n        if (!scheduledEmployees.some(employee => employee._id === currentEmployeeId)) {\n          scheduledEmployees.push(currentEmployee);\n        }\n      }\n\n      shifts.splice(shift, 1); // setSchedule({...schedule, shift})\n      // setEmployee({...currentEmployee, weekSchedule:[\n      //     schedule\n      // ]})\n    }\n\n    console.log(scheduledEmployees);\n  };\n\n  const canEmployeeTakeShift = (employee, shift) => {\n    console.log(employee);\n    console.log(shift);\n    let isAbleToWork = false;\n    const midDay = 12;\n    const date = new Date(shift.startDate);\n    const dayOfWeek = date.getDay();\n    const shiftStartTime = convertTimeToNumber(shift.startDate.split(' ')[4]);\n    const day = shift.startDate.split(' ')[0];\n    const availabilityDay = dayOfWeek === 0 ? 6 : dayOfWeek - 1;\n    const isAvailableMorning = employee.availability[availabilityDay].morning;\n    const isAvailableEvening = employee.availability[availabilityDay].evening;\n    const isMorningShift = shiftStartTime < midDay ? true : false;\n    const isAlreadyWorking = checkIfWorking(employee, day, isMorningShift);\n    console.log(isAlreadyWorking);\n    return isAlreadyWorking ? false : isMorningShift && isAvailableMorning ? true : false; // if(isAlreadyWorking) { \n    //     isAbleToWork = false\n    //     //return false \n    // }\n    // if(isMorningShift && isAvailableMorning) { isAbleToWork = true}\n    // console.log(isAbleToWork)\n    // return isAbleToWork\n  };\n\n  const checkIfWorking = (employee, day, isMorningShift) => {\n    let isWorking = false;\n    let tempTime = 0;\n    employee.weekSchedule.forEach(scheduledShift => {\n      tempTime = convertTimeToNumber(scheduledShift.startDate.split(' ')[4]);\n\n      if (!scheduledShift.startDate.includes(day)) {\n        isWorking = false;\n        return isWorking;\n      }\n\n      if (scheduledShift.startDate.includes(day) && isMorningShift) {\n        if (tempTime < 12) {\n          isWorking = true;\n          return isWorking;\n        }\n      }\n\n      if (scheduledShift.startDate.includes(day) && !isMorningShift) {\n        if (tempTime > 12) {\n          isWorking = true;\n          return isWorking;\n        }\n      }\n\n      return false;\n    });\n  };\n\n  const convertTimeToNumber = time => {\n    var hoursMinutes = time.split(/[.:]/);\n    var hours = parseInt(hoursMinutes[0], 10);\n    var minutes = hoursMinutes[1] ? parseInt(hoursMinutes[1], 10) : 0;\n    return hours + minutes / 60;\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const randomShiftsArray = randomizeShifts(shifts);\n    createSchedule(randomShiftsArray); // dispatch(editEmployee(currentId, employee))\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    direction: \"column\",\n    justify: \"center\",\n    alignItems: \"center\",\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      color: \"secondary\",\n      style: {\n        width: 300,\n        height: 50,\n        margin: 50\n      },\n      variant: \"contained\",\n      onClick: handleSubmit,\n      children: \"Generate Schedule\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GenerateScheduleButton, \"5kIpb/EwrUSXGVr2wuTI7ukpcqg=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = GenerateScheduleButton;\nexport default GenerateScheduleButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"GenerateScheduleButton\");","map":{"version":3,"sources":["/Users/tyler/Documents/Programming/ReactApps/scheduler-app-database/client/src/components/generateScheduleButton/GenerateScheduleButton.js"],"names":["Button","Typography","Grid","useState","useEffect","useDispatch","useSelector","editEmployee","getEmployees","weekShifts","GenerateScheduleButton","shifts","dispatch","employees","state","ignoreDesiredHours","employee","setEmployee","schedule","setSchedule","currentId","setCurrentId","randomizeShifts","array","shuffledArray","shift","i","length","j","Math","floor","random","x","y","push","createSchedule","scheduledEmployees","currentEmployee","currentEmployeeId","_id","canEmployeeTakeShift","weekSchedule","some","splice","console","log","isAbleToWork","midDay","date","Date","startDate","dayOfWeek","getDay","shiftStartTime","convertTimeToNumber","split","day","availabilityDay","isAvailableMorning","availability","morning","isAvailableEvening","evening","isMorningShift","isAlreadyWorking","checkIfWorking","isWorking","tempTime","forEach","scheduledShift","includes","time","hoursMinutes","hours","parseInt","minutes","handleSubmit","e","preventDefault","randomShiftsArray","width","height","margin"],"mappings":"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","sourcesContent":["import { Button, Typography, Grid } from \"@material-ui/core\"\nimport { useState, useEffect } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { editEmployee, getEmployees } from '../../actions/employees'\nimport weekShifts from '../../testData/weekShifts'\n\n\nconst GenerateScheduleButton = () => {\n    let shifts = weekShifts\n    const dispatch = useDispatch()\n    const employees = useSelector((state) => state.employees)\n    const ignoreDesiredHours = false\n    const [employee, setEmployee] = useState(null)\n    const [schedule, setSchedule] = useState(null)\n    const [currentId, setCurrentId] = useState(null)\n\n    // useEffect(() => {\n    //     console.log(employee)\n        //dispatch(editEmployee(employee._id, employee))\n    // }, [employee])\n    \n\n    const randomizeShifts = (array) => {\n        let shuffledArray = []\n\n        let shift = null\n\n        for (let i = array.length - 1; i >= 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n            shift = array[i]\n\n            for (let x = shift.length - 1; x >= 0; x--) {\n                const y = Math.floor(Math.random() * (x + 1));\n                [array[i][x], array[i][y]] = [array[i][y], array[i][x]];\n                shift = array[i][x]\n                shuffledArray.push(shift)\n            }\n        }\n        return shuffledArray\n    }\n\n\n    const createSchedule = (shifts) => {\n        const scheduledEmployees = []\n\n        while(shifts.length > 0) {\n            let currentEmployee = employees[Math.floor(Math.random() * (employees.length))]\n            let currentEmployeeId = currentEmployee._id\n            const shift = shifts[0]\n            \n            if(canEmployeeTakeShift(currentEmployee, shift)) {\n                currentEmployee.weekSchedule.push(shift)\n\n                if(!scheduledEmployees.some((employee) => employee._id === currentEmployeeId)){\n                    scheduledEmployees.push(currentEmployee)\n                }\n\n            }\n            shifts.splice(shift, 1)\n\n            // setSchedule({...schedule, shift})\n\n            // setEmployee({...currentEmployee, weekSchedule:[\n            //     schedule\n            // ]})\n\n        }\n        console.log(scheduledEmployees)\n        \n    }\n\n\n    const canEmployeeTakeShift = (employee, shift) => {\n        console.log(employee)\n        console.log(shift)\n        let isAbleToWork = false\n        const midDay = 12\n        \n        const date = new Date(shift.startDate)\n        const dayOfWeek = date.getDay()\n        const shiftStartTime = convertTimeToNumber(shift.startDate.split(' ').[4])\n        const day = shift.startDate.split(' ').[0]\n        const availabilityDay = dayOfWeek === 0 ? 6 : dayOfWeek - 1\n        const isAvailableMorning = employee.availability[availabilityDay].morning\n        const isAvailableEvening = employee.availability[availabilityDay].evening\n        const isMorningShift = shiftStartTime < midDay ? true : false\n        const isAlreadyWorking = checkIfWorking(employee, day, isMorningShift)\n        console.log(isAlreadyWorking)\n\n        return isAlreadyWorking ? false\n            : isMorningShift && isAvailableMorning ? true\n            : false\n\n\n        // if(isAlreadyWorking) { \n        //     isAbleToWork = false\n        //     //return false \n        // }\n\n        // if(isMorningShift && isAvailableMorning) { isAbleToWork = true}\n\n        // console.log(isAbleToWork)\n        // return isAbleToWork\n    }\n\n\n    const checkIfWorking = (employee, day, isMorningShift) => {\n        let isWorking = false\n        let tempTime = 0\n\n        employee.weekSchedule.forEach((scheduledShift) => {\n            tempTime = convertTimeToNumber(scheduledShift.startDate.split(' ').[4])\n\n            if(!scheduledShift.startDate.includes(day)) { \n                isWorking = false\n                return isWorking \n            }\n\n            if(scheduledShift.startDate.includes(day) && isMorningShift) {\n\n                if(tempTime < 12) {\n                    isWorking = true\n                    return isWorking\n                }\n\n            }\n\n            if(scheduledShift.startDate.includes(day) && !isMorningShift) {\n\n                if(tempTime > 12) {\n                    isWorking = true\n                    return isWorking\n                }\n\n            }\n            \n            return false\n\n        })\n    }\n\n\n    const convertTimeToNumber = (time) => {\n        var hoursMinutes = time.split(/[.:]/);\n        var hours = parseInt(hoursMinutes[0], 10);\n        var minutes = hoursMinutes[1] ? parseInt(hoursMinutes[1], 10) : 0;\n        return hours + minutes / 60;\n    }\n\n    \n    const handleSubmit = (e) => {\n        e.preventDefault()\n        const randomShiftsArray = randomizeShifts(shifts)\n        createSchedule(randomShiftsArray)\n        // dispatch(editEmployee(currentId, employee))\n    }\n\n    \n    return (\n        <Grid container direction='column' justify='center' alignItems='center'>\n            <Button color='secondary' style={{width: 300, height: 50, margin:50}} variant='contained' onClick={handleSubmit}>\n                Generate Schedule\n            </Button>\n        </Grid>\n    )\n}\n\nexport default GenerateScheduleButton\n"]},"metadata":{},"sourceType":"module"}