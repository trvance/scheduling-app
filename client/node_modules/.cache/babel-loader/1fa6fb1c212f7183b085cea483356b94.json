{"ast":null,"code":"var _jsxFileName = \"/Users/tyler/Documents/Programming/ReactApps/scheduler-app-database/client/src/components/generateScheduleButton/GenerateScheduleButton.js\",\n    _s = $RefreshSig$();\n\nimport { Button, Typography, Grid } from \"@material-ui/core\";\nimport { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { editEmployee, getEmployees } from '../../actions/employees';\nimport weekShifts from '../../testData/weekShifts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GenerateScheduleButton = () => {\n  _s();\n\n  let shifts = weekShifts;\n  const dispatch = useDispatch();\n  const employees = useSelector(state => state.employees);\n  const [employee, setEmployee] = useState(null);\n  const [schedule, setSchedule] = useState(null);\n  const [currentId, setCurrentId] = useState(null); // useEffect(() => {\n  //     updateEmployee(employee)\n  // })\n\n  const randomizeShifts = array => {\n    let shuffledArray = [];\n    let shift = null;\n\n    for (let i = array.length - 1; i >= 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n      shift = array[i];\n\n      for (let x = shift.length - 1; x >= 0; x--) {\n        const y = Math.floor(Math.random() * (x + 1));\n        [array[i][x], array[i][y]] = [array[i][y], array[i][x]];\n        shift = array[i][x];\n        shuffledArray.push(shift);\n      }\n    }\n\n    return shuffledArray;\n  };\n\n  const createSchedule = shifts => {\n    const updatedEmployees = dispatch(getEmployees());\n    console.log(updatedEmployees);\n\n    while (shifts.length > 0) {\n      let currentEmployee = updatedEmployees[Math.floor(Math.random() * updatedEmployees.length)];\n      const shift = shifts[0];\n      currentEmployee.weekSchedule.push(shift); // setSchedule({...schedule, shift})\n      // setEmployee({...currentEmployee, weekSchedule:[\n      //     schedule\n      // ]})\n\n      shifts.splice(shift, 1);\n    }\n\n    console.log(updatedEmployees); // const startTime = shift.startDate.split(' ').[4]\n    // const endTime = shift.endDate.split(' ').[4]\n    // console.log(shift)\n    // console.log(startTime)\n    // console.log(endTime)\n  };\n\n  const convertTimeToNumber = time => {\n    const startHour = time.split(':')[0];\n    const startMin = time.split(':')[1];\n    console.log(startHour + \" \" + startMin);\n  }; // const updateEmployee = (employee) => {\n  //     console.log(employee)\n  // }\n\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const randomShiftsArray = randomizeShifts(shifts);\n    createSchedule(randomShiftsArray); // console.log(employees)\n    //console.log(employees[0])\n    //dispatch(editEmployee(employee._id, employee))\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    direction: \"column\",\n    justify: \"center\",\n    alignItems: \"center\",\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      color: \"secondary\",\n      style: {\n        width: 300,\n        height: 50,\n        margin: 50\n      },\n      variant: \"contained\",\n      onClick: handleSubmit,\n      children: \"Generate Schedule\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GenerateScheduleButton, \"5kIpb/EwrUSXGVr2wuTI7ukpcqg=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = GenerateScheduleButton;\nexport default GenerateScheduleButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"GenerateScheduleButton\");","map":{"version":3,"sources":["/Users/tyler/Documents/Programming/ReactApps/scheduler-app-database/client/src/components/generateScheduleButton/GenerateScheduleButton.js"],"names":["Button","Typography","Grid","useState","useEffect","useDispatch","useSelector","editEmployee","getEmployees","weekShifts","GenerateScheduleButton","shifts","dispatch","employees","state","employee","setEmployee","schedule","setSchedule","currentId","setCurrentId","randomizeShifts","array","shuffledArray","shift","i","length","j","Math","floor","random","x","y","push","createSchedule","updatedEmployees","console","log","currentEmployee","weekSchedule","splice","convertTimeToNumber","time","startHour","split","startMin","handleSubmit","e","preventDefault","randomShiftsArray","width","height","margin"],"mappings":"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","sourcesContent":["import { Button, Typography, Grid } from \"@material-ui/core\"\nimport { useState, useEffect } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { editEmployee, getEmployees } from '../../actions/employees'\nimport weekShifts from '../../testData/weekShifts'\n\n\nconst GenerateScheduleButton = () => {\n    let shifts = weekShifts\n    const dispatch = useDispatch()\n    const employees = useSelector((state) => state.employees)\n    const [employee, setEmployee] = useState(null)\n    const [schedule, setSchedule] = useState(null)\n    const [currentId, setCurrentId] = useState(null)\n\n    // useEffect(() => {\n    //     updateEmployee(employee)\n    // })\n    \n\n    const randomizeShifts = (array) => {\n        let shuffledArray = []\n\n        let shift = null\n\n        for (let i = array.length - 1; i >= 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n            shift = array[i]\n\n            for (let x = shift.length - 1; x >= 0; x--) {\n                const y = Math.floor(Math.random() * (x + 1));\n                [array[i][x], array[i][y]] = [array[i][y], array[i][x]];\n                shift = array[i][x]\n                shuffledArray.push(shift)\n            }\n        }\n        return shuffledArray\n    }\n\n\n    const createSchedule = (shifts) => {\n        const updatedEmployees = dispatch(getEmployees())\n        console.log(updatedEmployees)\n        while(shifts.length > 0) {\n            let currentEmployee = updatedEmployees[Math.floor(Math.random() * (updatedEmployees.length))]\n            const shift = shifts[0]\n\n            currentEmployee.weekSchedule.push(shift)\n\n            // setSchedule({...schedule, shift})\n\n            // setEmployee({...currentEmployee, weekSchedule:[\n            //     schedule\n            // ]})\n            shifts.splice(shift, 1)\n\n        }\n        console.log(updatedEmployees)\n\n        // const startTime = shift.startDate.split(' ').[4]\n        // const endTime = shift.endDate.split(' ').[4]\n        // console.log(shift)\n        // console.log(startTime)\n        // console.log(endTime)\n        \n        \n    }\n\n\n    const convertTimeToNumber = (time) => {\n        const startHour = time.split(':').[0]\n        const startMin = time.split(':').[1]\n        console.log(startHour + \" \" + startMin)\n    }\n\n\n    // const updateEmployee = (employee) => {\n    //     console.log(employee)\n    // }\n    \n    const handleSubmit = (e) => {\n        e.preventDefault()\n        const randomShiftsArray = randomizeShifts(shifts)\n        createSchedule(randomShiftsArray)\n        // console.log(employees)\n        //console.log(employees[0])\n        //dispatch(editEmployee(employee._id, employee))\n    }\n\n    \n    return (\n        <Grid container direction='column' justify='center' alignItems='center'>\n            <Button color='secondary' style={{width: 300, height: 50, margin:50}} variant='contained' onClick={handleSubmit}>\n                Generate Schedule\n            </Button>\n        </Grid>\n    )\n}\n\nexport default GenerateScheduleButton\n"]},"metadata":{},"sourceType":"module"}