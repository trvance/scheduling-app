{"ast":null,"code":"var _jsxFileName = \"/Users/tyler/Documents/Programming/ReactApps/scheduler-app/src/components/Calendar/Calendar.js\",\n    _s = $RefreshSig$();\n\nimport './calendar.css';\nimport { useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport { format } from 'date-fns';\nimport { subMonths, addMonths, addDays, isSameDay, isSameMonth } from 'date-fns';\nimport { startOfWeek, endOfWeek, startOfMonth, endOfMonth } from 'date-fns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Calendar = () => {\n  _s();\n\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n  const [selectedDate, setSelectedDate] = useState(new Date());\n\n  const renderHeader = () => {\n    const dateFormat = 'MMMM yyyy';\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header row flex-middle\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col col-start\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"icon\",\n          onClick: prevMonth,\n          children: \"chevron_left\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col col-center\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: format(currentMonth, dateFormat)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col col-end\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"icon\",\n          onClick: nextMonth,\n          children: \"chevron_right\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 11\n    }, this);\n  };\n\n  const renderDays = () => {\n    const dateFormat = window.innerWidth > 800 ? 'EEEE' : 'E';\n    const days = [];\n    let startDate = startOfWeek(currentMonth);\n\n    for (let i = 0; i <= 6; i++) {\n      days.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col col-center\",\n        children: format(addDays(startDate, i), dateFormat)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"days row\",\n      children: days\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderCells = () => {\n    const monthStart = startOfMonth(currentMonth);\n    const monthEnd = endOfMonth(monthStart);\n    const startDate = startOfWeek(monthStart);\n    const endDate = endOfWeek(monthEnd);\n    const dateFormat = 'd';\n    const rows = [];\n    let days = [];\n    let day = startDate;\n    let formattedDate = '';\n\n    while (day <= endDate) {\n      for (let i = 0; i < 7; i++) {\n        formattedDate = format(day, dateFormat);\n        const cloneDay = day;\n        days.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `col cell ${!isSameMonth(day, monthStart) ? 'disabled' : isSameDay(day, selectedDate) ? 'selected' : ''}`,\n          onClick: () => onDateClick(cloneDay),\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"number\",\n            children: formattedDate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"bg\",\n            children: formattedDate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }, this)]\n        }, day, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this));\n        day = addDays(day, 1);\n      }\n\n      rows.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: days\n      }, day, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this));\n      days = [];\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: rows\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this);\n  };\n\n  const onDateClick = day => {\n    setSelectedDate(day);\n  };\n\n  const prevMonth = () => {\n    setCurrentMonth(subMonths(currentMonth, 1));\n  };\n\n  const nextMonth = () => {\n    setCurrentMonth(addMonths(currentMonth, 1));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar\",\n      children: [renderHeader(), renderDays(), renderCells()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Calendar, \"ld2IqSM6Xpfu7szfrf0VMoF6O/U=\");\n\n_c = Calendar;\nexport default Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["/Users/tyler/Documents/Programming/ReactApps/scheduler-app/src/components/Calendar/Calendar.js"],"names":["useState","Container","Typography","format","subMonths","addMonths","addDays","isSameDay","isSameMonth","startOfWeek","endOfWeek","startOfMonth","endOfMonth","Calendar","currentMonth","setCurrentMonth","Date","selectedDate","setSelectedDate","renderHeader","dateFormat","prevMonth","nextMonth","renderDays","window","innerWidth","days","startDate","i","push","renderCells","monthStart","monthEnd","endDate","rows","day","formattedDate","cloneDay","onDateClick"],"mappings":"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","sourcesContent":["import './calendar.css'\nimport { useState } from 'react'\nimport Container from '@material-ui/core/Container'\nimport Typography from '@material-ui/core/Typography'\nimport { format } from 'date-fns'\nimport { subMonths, addMonths, addDays, isSameDay, isSameMonth } from 'date-fns'\nimport { startOfWeek, endOfWeek, startOfMonth, endOfMonth } from 'date-fns'\n\n\nconst Calendar = () => {\n    const [currentMonth, setCurrentMonth] = useState(new Date())\n    const [selectedDate, setSelectedDate] = useState(new Date())\n    \n    const renderHeader = () => {\n        const dateFormat = 'MMMM yyyy'\n        return (\n          <div className='header row flex-middle'>\n            <div className='col col-start'>\n                <div className='icon' onClick={prevMonth}>\n                    chevron_left\n                </div>\n            </div>\n            <div className='col col-center'>\n                <span>\n                    {format(currentMonth, dateFormat)}\n                </span>\n            </div>\n            <div className='col col-end'>\n                <div className='icon' onClick={nextMonth}>\n                    chevron_right\n                </div>\n            </div>\n          </div>\n        )\n    }\n\n    const renderDays = () => {\n        const dateFormat = (window.innerWidth>800) ? 'EEEE' : 'E'\n        const days = []\n\n        let startDate = startOfWeek(currentMonth)\n\n        for(let i = 0; i <= 6; i++) {\n            days.push(\n                <div className='col col-center' key={i}>\n                    {format(addDays(startDate, i), dateFormat)}\n                </div>\n            )\n        }\n\n        return(\n            <div className='days row'>\n                {days}\n            </div>\n        )\n    }\n\n    const renderCells = () => {\n        const monthStart = startOfMonth(currentMonth)\n        const monthEnd = endOfMonth(monthStart)\n        const startDate = startOfWeek(monthStart)\n        const endDate = endOfWeek(monthEnd)\n\n        const dateFormat = 'd'\n        const rows = []\n\n        let days = []\n        let day = startDate\n        let formattedDate = ''\n\n        while (day <= endDate) {\n            for(let i = 0; i < 7; i++) {\n                formattedDate = format(day, dateFormat)\n                const cloneDay = day\n                \n                days.push(\n                    <div \n                        className={`col cell ${!isSameMonth(day, monthStart)\n                            ? 'disabled'\n                            : isSameDay(day, selectedDate) ? 'selected' : ''}`}\n                        key={day}\n                        onClick={() => onDateClick(cloneDay)}\n                    >\n                        <span className='number'>{formattedDate}</span>\n                        <span className='bg'>{formattedDate}</span>\n                    </div>\n                )\n                day = addDays(day, 1)\n            }\n            rows.push(\n                <div className='row' key={day}>\n                    {days}\n                </div>\n            )\n            days = []\n        }\n        return(\n            <div className='body'>\n                {rows}\n            </div>\n        )\n    }\n    \n    const onDateClick = day => {\n        setSelectedDate(day)\n    }\n    \n    const prevMonth = () => {\n        setCurrentMonth(subMonths(currentMonth, 1))\n    }\n    \n    const nextMonth = () => {\n        setCurrentMonth(addMonths(currentMonth, 1))\n    }\n\n    return (\n        <Container>\n            <div className='calendar'>\n                {renderHeader()}\n                {renderDays()}\n                {renderCells()}\n            </div>\n        </Container>\n    )\n}\n\nexport default Calendar\n"]},"metadata":{},"sourceType":"module"}